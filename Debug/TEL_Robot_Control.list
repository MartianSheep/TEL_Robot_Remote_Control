
TEL_Robot_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea0  08006ea0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea8  08006ea8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000010  08006ec0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08006ec0  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bc0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b0  00000000  00000000  00031c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00033db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00034db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027559  00000000  00000000  00035ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f4f  00000000  00000000  0005d241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5609  00000000  00000000  0006e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163799  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  001637ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e40 	.word	0x08006e40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006e40 	.word	0x08006e40

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MotorStop>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Motor
void MotorStop(){
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	PWM[0] = 0;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <MotorStop+0x70>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
	PWM[1] = 0;
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <MotorStop+0x70>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
	PWM[2] = 0;
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <MotorStop+0x70>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
	PWM[3] = 0;
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <MotorStop+0x70>)
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, abs(PWM[0]));
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <MotorStop+0x70>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004e4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <MotorStop+0x74>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, abs(PWM[1]));
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <MotorStop+0x70>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004f6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MotorStop+0x74>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3, abs(PWM[2]));
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MotorStop+0x70>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000508:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MotorStop+0x74>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_4, abs(PWM[3]));
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <MotorStop+0x70>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800051a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800051e:	4b05      	ldr	r3, [pc, #20]	; (8000534 <MotorStop+0x74>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	2000002c 	.word	0x2000002c
 8000534:	20000090 	.word	0x20000090

08000538 <setAngle>:

// Servo
void setAngle(uint8_t id, int16_t angle){
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	4613      	mov	r3, r2
 8000546:	80bb      	strh	r3, [r7, #4]
	uint8_t data[12] = {0x12, 0x4c, 0x08, 0x07, id, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x00};
 8000548:	2312      	movs	r3, #18
 800054a:	733b      	strb	r3, [r7, #12]
 800054c:	234c      	movs	r3, #76	; 0x4c
 800054e:	737b      	strb	r3, [r7, #13]
 8000550:	2308      	movs	r3, #8
 8000552:	73bb      	strb	r3, [r7, #14]
 8000554:	2307      	movs	r3, #7
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	743b      	strb	r3, [r7, #16]
 800055c:	2300      	movs	r3, #0
 800055e:	747b      	strb	r3, [r7, #17]
 8000560:	2300      	movs	r3, #0
 8000562:	74bb      	strb	r3, [r7, #18]
 8000564:	2320      	movs	r3, #32
 8000566:	74fb      	strb	r3, [r7, #19]
 8000568:	2303      	movs	r3, #3
 800056a:	753b      	strb	r3, [r7, #20]
 800056c:	2300      	movs	r3, #0
 800056e:	757b      	strb	r3, [r7, #21]
 8000570:	2300      	movs	r3, #0
 8000572:	75bb      	strb	r3, [r7, #22]
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]
	angle = angle * 10;
 8000578:	88bb      	ldrh	r3, [r7, #4]
 800057a:	461a      	mov	r2, r3
 800057c:	0092      	lsls	r2, r2, #2
 800057e:	4413      	add	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	b29b      	uxth	r3, r3
 8000584:	80bb      	strh	r3, [r7, #4]
	data[5] = (uint8_t)((angle << 8) >> 8);
 8000586:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800058a:	021b      	lsls	r3, r3, #8
 800058c:	121b      	asrs	r3, r3, #8
 800058e:	b2db      	uxtb	r3, r3
 8000590:	747b      	strb	r3, [r7, #17]
	data[6] = (uint8_t)(angle >> 8);
 8000592:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000596:	121b      	asrs	r3, r3, #8
 8000598:	b21b      	sxth	r3, r3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	74bb      	strb	r3, [r7, #18]
	int16_t checksum = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	83fb      	strh	r3, [r7, #30]
	for(int i = 0; i < 11; ++i)
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	e00c      	b.n	80005c2 <setAngle+0x8a>
		checksum += data[i];
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	8bfb      	ldrh	r3, [r7, #30]
 80005b6:	4413      	add	r3, r2
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	83fb      	strh	r3, [r7, #30]
	for(int i = 0; i < 11; ++i)
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	3301      	adds	r3, #1
 80005c0:	61bb      	str	r3, [r7, #24]
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	2b0a      	cmp	r3, #10
 80005c6:	ddef      	ble.n	80005a8 <setAngle+0x70>
	data[11] = (uint8_t)((checksum << 8) >> 8);
 80005c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80005cc:	021b      	lsls	r3, r3, #8
 80005ce:	121b      	asrs	r3, r3, #8
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart3, data, sizeof(data), HAL_MAX_DELAY);
 80005d4:	f107 010c 	add.w	r1, r7, #12
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	220c      	movs	r2, #12
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <setAngle+0xb4>)
 80005e0:	f005 fa7c 	bl	8005adc <HAL_UART_Transmit>
//	pingDone = 0;
//	HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, UART3_BufferSize);
}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000128 	.word	0x20000128

080005f0 <SBUS_Data>:
//	*ptr = 0x00; // Flush the character buffer
//	HAL_UART_Receive(&huart2, (uint8_t*) ptr, 1, 0xFFFF);
//	return 1;
//}

void SBUS_Data(){
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
//	for(int i = 0; i < 25; ++i){
//		printf("%02X ", buf_[i]);
//	}
//	printf("\r\n");
	// main part
	if (buf_[0] != 0x0f) return;
 80005f4:	4b82      	ldr	r3, [pc, #520]	; (8000800 <SBUS_Data+0x210>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	f040 80fc 	bne.w	80007f6 <SBUS_Data+0x206>
    ch_[ 0] = (((int16_t)buf_[ 1] >> 0) | ((int16_t)buf_[ 2] << 8)) & 0x07FF;
 80005fe:	4b80      	ldr	r3, [pc, #512]	; (8000800 <SBUS_Data+0x210>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	b21a      	sxth	r2, r3
 8000604:	4b7e      	ldr	r3, [pc, #504]	; (8000800 <SBUS_Data+0x210>)
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21b      	sxth	r3, r3
 8000610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000614:	b21a      	sxth	r2, r3
 8000616:	4b7b      	ldr	r3, [pc, #492]	; (8000804 <SBUS_Data+0x214>)
 8000618:	801a      	strh	r2, [r3, #0]
    ch_[ 1] = (((int16_t)buf_[ 2] >> 3) | ((int16_t)buf_[ 3] << 5)) & 0x07FF;
 800061a:	4b79      	ldr	r3, [pc, #484]	; (8000800 <SBUS_Data+0x210>)
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b76      	ldr	r3, [pc, #472]	; (8000800 <SBUS_Data+0x210>)
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	015b      	lsls	r3, r3, #5
 800062a:	b21b      	sxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	b21b      	sxth	r3, r3
 8000630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000634:	b21a      	sxth	r2, r3
 8000636:	4b73      	ldr	r3, [pc, #460]	; (8000804 <SBUS_Data+0x214>)
 8000638:	805a      	strh	r2, [r3, #2]
    ch_[ 2] = (((int16_t)buf_[ 3] >> 6) | ((int16_t)buf_[ 4] << 2)  | ((int16_t)buf_[ 5] << 10)) & 0x07FF;
 800063a:	4b71      	ldr	r3, [pc, #452]	; (8000800 <SBUS_Data+0x210>)
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	099b      	lsrs	r3, r3, #6
 8000640:	b2db      	uxtb	r3, r3
 8000642:	b21a      	sxth	r2, r3
 8000644:	4b6e      	ldr	r3, [pc, #440]	; (8000800 <SBUS_Data+0x210>)
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21a      	sxth	r2, r3
 8000650:	4b6b      	ldr	r3, [pc, #428]	; (8000800 <SBUS_Data+0x210>)
 8000652:	795b      	ldrb	r3, [r3, #5]
 8000654:	029b      	lsls	r3, r3, #10
 8000656:	b21b      	sxth	r3, r3
 8000658:	4313      	orrs	r3, r2
 800065a:	b21b      	sxth	r3, r3
 800065c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000660:	b21a      	sxth	r2, r3
 8000662:	4b68      	ldr	r3, [pc, #416]	; (8000804 <SBUS_Data+0x214>)
 8000664:	809a      	strh	r2, [r3, #4]
    ch_[ 3] = (((int16_t)buf_[ 5] >> 1) | ((int16_t)buf_[ 6] << 7)) & 0x07FF;
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <SBUS_Data+0x210>)
 8000668:	795b      	ldrb	r3, [r3, #5]
 800066a:	085b      	lsrs	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	b21a      	sxth	r2, r3
 8000670:	4b63      	ldr	r3, [pc, #396]	; (8000800 <SBUS_Data+0x210>)
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	01db      	lsls	r3, r3, #7
 8000676:	b21b      	sxth	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b21b      	sxth	r3, r3
 800067c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000680:	b21a      	sxth	r2, r3
 8000682:	4b60      	ldr	r3, [pc, #384]	; (8000804 <SBUS_Data+0x214>)
 8000684:	80da      	strh	r2, [r3, #6]
    ch_[ 4] = (((int16_t)buf_[ 6] >> 4) | ((int16_t)buf_[ 7] << 4)) & 0x07FF;
 8000686:	4b5e      	ldr	r3, [pc, #376]	; (8000800 <SBUS_Data+0x210>)
 8000688:	799b      	ldrb	r3, [r3, #6]
 800068a:	091b      	lsrs	r3, r3, #4
 800068c:	b2db      	uxtb	r3, r3
 800068e:	b21a      	sxth	r2, r3
 8000690:	4b5b      	ldr	r3, [pc, #364]	; (8000800 <SBUS_Data+0x210>)
 8000692:	79db      	ldrb	r3, [r3, #7]
 8000694:	011b      	lsls	r3, r3, #4
 8000696:	b21b      	sxth	r3, r3
 8000698:	4313      	orrs	r3, r2
 800069a:	b21b      	sxth	r3, r3
 800069c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	4b58      	ldr	r3, [pc, #352]	; (8000804 <SBUS_Data+0x214>)
 80006a4:	811a      	strh	r2, [r3, #8]
    ch_[ 5] = (((int16_t)buf_[ 7] >> 7) | ((int16_t)buf_[ 8] << 1)  | ((int16_t)buf_[ 9] <<  9)) & 0x07FF;
 80006a6:	4b56      	ldr	r3, [pc, #344]	; (8000800 <SBUS_Data+0x210>)
 80006a8:	79db      	ldrb	r3, [r3, #7]
 80006aa:	09db      	lsrs	r3, r3, #7
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	4b53      	ldr	r3, [pc, #332]	; (8000800 <SBUS_Data+0x210>)
 80006b2:	7a1b      	ldrb	r3, [r3, #8]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b21a      	sxth	r2, r3
 80006bc:	4b50      	ldr	r3, [pc, #320]	; (8000800 <SBUS_Data+0x210>)
 80006be:	7a5b      	ldrb	r3, [r3, #9]
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006cc:	b21a      	sxth	r2, r3
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <SBUS_Data+0x214>)
 80006d0:	815a      	strh	r2, [r3, #10]
    ch_[ 6] = (((int16_t)buf_[ 9] >> 2) | ((int16_t)buf_[10] << 6)) & 0x07FF;
 80006d2:	4b4b      	ldr	r3, [pc, #300]	; (8000800 <SBUS_Data+0x210>)
 80006d4:	7a5b      	ldrb	r3, [r3, #9]
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	b21a      	sxth	r2, r3
 80006dc:	4b48      	ldr	r3, [pc, #288]	; (8000800 <SBUS_Data+0x210>)
 80006de:	7a9b      	ldrb	r3, [r3, #10]
 80006e0:	019b      	lsls	r3, r3, #6
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006ec:	b21a      	sxth	r2, r3
 80006ee:	4b45      	ldr	r3, [pc, #276]	; (8000804 <SBUS_Data+0x214>)
 80006f0:	819a      	strh	r2, [r3, #12]
    ch_[ 7] = (((int16_t)buf_[10] >> 5) | ((int16_t)buf_[11] << 3)) & 0x07FF;
 80006f2:	4b43      	ldr	r3, [pc, #268]	; (8000800 <SBUS_Data+0x210>)
 80006f4:	7a9b      	ldrb	r3, [r3, #10]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	4b40      	ldr	r3, [pc, #256]	; (8000800 <SBUS_Data+0x210>)
 80006fe:	7adb      	ldrb	r3, [r3, #11]
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	b21b      	sxth	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	b21b      	sxth	r3, r3
 8000708:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800070c:	b21a      	sxth	r2, r3
 800070e:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <SBUS_Data+0x214>)
 8000710:	81da      	strh	r2, [r3, #14]
    ch_[ 8] = (((int16_t)buf_[12] >> 0) | ((int16_t)buf_[13] << 8)) & 0x07FF;
 8000712:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <SBUS_Data+0x210>)
 8000714:	7b1b      	ldrb	r3, [r3, #12]
 8000716:	b21a      	sxth	r2, r3
 8000718:	4b39      	ldr	r3, [pc, #228]	; (8000800 <SBUS_Data+0x210>)
 800071a:	7b5b      	ldrb	r3, [r3, #13]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	b21b      	sxth	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b21b      	sxth	r3, r3
 8000724:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000728:	b21a      	sxth	r2, r3
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <SBUS_Data+0x214>)
 800072c:	821a      	strh	r2, [r3, #16]
    ch_[ 9] = (((int16_t)buf_[13] >> 3) | ((int16_t)buf_[14] << 5)) & 0x07FF;
 800072e:	4b34      	ldr	r3, [pc, #208]	; (8000800 <SBUS_Data+0x210>)
 8000730:	7b5b      	ldrb	r3, [r3, #13]
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	4b31      	ldr	r3, [pc, #196]	; (8000800 <SBUS_Data+0x210>)
 800073a:	7b9b      	ldrb	r3, [r3, #14]
 800073c:	015b      	lsls	r3, r3, #5
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21b      	sxth	r3, r3
 8000744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000748:	b21a      	sxth	r2, r3
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <SBUS_Data+0x214>)
 800074c:	825a      	strh	r2, [r3, #18]
//    ch_[13] = (((int16_t)buf_[18] >> 7) | ((int16_t)buf_[19] << 1)  | ((int16_t)buf_[20] <<  9)) & 0x07FF;
//    ch_[14] = (((int16_t)buf_[20] >> 2) | ((int16_t)buf_[21] << 6)) & 0x07FF;
//    ch_[15] = (((int16_t)buf_[21] >> 5) | ((int16_t)buf_[22] << 3)) & 0x07FF;
//	ch17_ = buf_[23] & CH17_MASK_;
//	ch18_ = buf_[23] & CH18_MASK_;
	lost_frame_ = buf_[23] & LOST_FRAME_MASK_;
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <SBUS_Data+0x210>)
 8000750:	7dda      	ldrb	r2, [r3, #23]
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <SBUS_Data+0x218>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4013      	ands	r3, r2
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <SBUS_Data+0x21c>)
 800075c:	701a      	strb	r2, [r3, #0]
	failsafe_ = buf_[23] & FAILSAFE_MASK_;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <SBUS_Data+0x210>)
 8000760:	7dda      	ldrb	r2, [r3, #23]
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <SBUS_Data+0x220>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4013      	ands	r3, r2
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <SBUS_Data+0x224>)
 800076c:	701a      	strb	r2, [r3, #0]

	// right+, top+
	ch_[0] = (ch_[0] - 999) / 2;
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SBUS_Data+0x214>)
 8000770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000774:	f2a3 33e7 	subw	r3, r3, #999	; 0x3e7
 8000778:	0fda      	lsrs	r2, r3, #31
 800077a:	4413      	add	r3, r2
 800077c:	105b      	asrs	r3, r3, #1
 800077e:	b21a      	sxth	r2, r3
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <SBUS_Data+0x214>)
 8000782:	801a      	strh	r2, [r3, #0]
	ch_[1] = (995 - ch_[1]) / 2;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SBUS_Data+0x214>)
 8000786:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800078a:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 800078e:	3303      	adds	r3, #3
 8000790:	0fda      	lsrs	r2, r3, #31
 8000792:	4413      	add	r3, r2
 8000794:	105b      	asrs	r3, r3, #1
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <SBUS_Data+0x214>)
 800079a:	805a      	strh	r2, [r3, #2]
	ch_[2] = (ch_[2] - 1000) / 2 + ch_[1]; // boost
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <SBUS_Data+0x214>)
 800079e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007a2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80007a6:	0fda      	lsrs	r2, r3, #31
 80007a8:	4413      	add	r3, r2
 80007aa:	105b      	asrs	r3, r3, #1
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <SBUS_Data+0x214>)
 80007b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4413      	add	r3, r2
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <SBUS_Data+0x214>)
 80007be:	809a      	strh	r2, [r3, #4]
	ch_[3] = (ch_[3] - 994) / 2;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <SBUS_Data+0x214>)
 80007c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007c6:	f2a3 33e2 	subw	r3, r3, #994	; 0x3e2
 80007ca:	0fda      	lsrs	r2, r3, #31
 80007cc:	4413      	add	r3, r2
 80007ce:	105b      	asrs	r3, r3, #1
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <SBUS_Data+0x214>)
 80007d4:	80da      	strh	r2, [r3, #6]
	// ch_[4]
	ch_[5] = (1925 - ch_[5]) / 13;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <SBUS_Data+0x214>)
 80007d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80007dc:	f5c3 63f0 	rsb	r3, r3, #1920	; 0x780
 80007e0:	3305      	adds	r3, #5
 80007e2:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <SBUS_Data+0x228>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1092      	asrs	r2, r2, #2
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SBUS_Data+0x214>)
 80007f2:	815a      	strh	r2, [r3, #10]
 80007f4:	e000      	b.n	80007f8 <SBUS_Data+0x208>
	if (buf_[0] != 0x0f) return;
 80007f6:	bf00      	nop

//	for(int i = 0; i < 10; ++i){
//		printf("%d ", ch_[i]);
//	}
//	printf("\r\n");
}
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	2000004c 	.word	0x2000004c
 8000804:	2000006c 	.word	0x2000006c
 8000808:	20000000 	.word	0x20000000
 800080c:	2000008c 	.word	0x2000008c
 8000810:	20000001 	.word	0x20000001
 8000814:	2000008d 	.word	0x2000008d
 8000818:	4ec4ec4f 	.word	0x4ec4ec4f

0800081c <setMotor>:

void setMotor(){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	// front-back:  1,-1, 1,-1
	// left-right: -1,-1, 1, 1
	// lr-rotate:   1, 1, 1, 1
	PWM[0] = ch_[4] > 800 ? 0 :  ch_[2] - ch_[3] + ch_[0];
 8000820:	4b98      	ldr	r3, [pc, #608]	; (8000a84 <setMotor+0x268>)
 8000822:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000826:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800082a:	dc0c      	bgt.n	8000846 <setMotor+0x2a>
 800082c:	4b95      	ldr	r3, [pc, #596]	; (8000a84 <setMotor+0x268>)
 800082e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000832:	461a      	mov	r2, r3
 8000834:	4b93      	ldr	r3, [pc, #588]	; (8000a84 <setMotor+0x268>)
 8000836:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	4a91      	ldr	r2, [pc, #580]	; (8000a84 <setMotor+0x268>)
 800083e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000842:	4413      	add	r3, r2
 8000844:	e000      	b.n	8000848 <setMotor+0x2c>
 8000846:	2300      	movs	r3, #0
 8000848:	4a8f      	ldr	r2, [pc, #572]	; (8000a88 <setMotor+0x26c>)
 800084a:	6013      	str	r3, [r2, #0]
	PWM[1] = ch_[4] > 800 ? 0 : -ch_[2] - ch_[3] + ch_[0];
 800084c:	4b8d      	ldr	r3, [pc, #564]	; (8000a84 <setMotor+0x268>)
 800084e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000852:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000856:	dc0c      	bgt.n	8000872 <setMotor+0x56>
 8000858:	4b8a      	ldr	r3, [pc, #552]	; (8000a84 <setMotor+0x268>)
 800085a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800085e:	425b      	negs	r3, r3
 8000860:	4a88      	ldr	r2, [pc, #544]	; (8000a84 <setMotor+0x268>)
 8000862:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	4a86      	ldr	r2, [pc, #536]	; (8000a84 <setMotor+0x268>)
 800086a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800086e:	4413      	add	r3, r2
 8000870:	e000      	b.n	8000874 <setMotor+0x58>
 8000872:	2300      	movs	r3, #0
 8000874:	4a84      	ldr	r2, [pc, #528]	; (8000a88 <setMotor+0x26c>)
 8000876:	6053      	str	r3, [r2, #4]
	PWM[2] = ch_[4] > 800 ? 0 :  ch_[2] + ch_[3] + ch_[0];
 8000878:	4b82      	ldr	r3, [pc, #520]	; (8000a84 <setMotor+0x268>)
 800087a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800087e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000882:	dc0c      	bgt.n	800089e <setMotor+0x82>
 8000884:	4b7f      	ldr	r3, [pc, #508]	; (8000a84 <setMotor+0x268>)
 8000886:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800088a:	461a      	mov	r2, r3
 800088c:	4b7d      	ldr	r3, [pc, #500]	; (8000a84 <setMotor+0x268>)
 800088e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000892:	4413      	add	r3, r2
 8000894:	4a7b      	ldr	r2, [pc, #492]	; (8000a84 <setMotor+0x268>)
 8000896:	f9b2 2000 	ldrsh.w	r2, [r2]
 800089a:	4413      	add	r3, r2
 800089c:	e000      	b.n	80008a0 <setMotor+0x84>
 800089e:	2300      	movs	r3, #0
 80008a0:	4a79      	ldr	r2, [pc, #484]	; (8000a88 <setMotor+0x26c>)
 80008a2:	6093      	str	r3, [r2, #8]
	PWM[3] = ch_[4] > 800 ? 0 : -ch_[2] + ch_[3] + ch_[0];
 80008a4:	4b77      	ldr	r3, [pc, #476]	; (8000a84 <setMotor+0x268>)
 80008a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80008aa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80008ae:	dc0c      	bgt.n	80008ca <setMotor+0xae>
 80008b0:	4b74      	ldr	r3, [pc, #464]	; (8000a84 <setMotor+0x268>)
 80008b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b72      	ldr	r3, [pc, #456]	; (8000a84 <setMotor+0x268>)
 80008ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	4a70      	ldr	r2, [pc, #448]	; (8000a84 <setMotor+0x268>)
 80008c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008c6:	4413      	add	r3, r2
 80008c8:	e000      	b.n	80008cc <setMotor+0xb0>
 80008ca:	2300      	movs	r3, #0
 80008cc:	4a6e      	ldr	r2, [pc, #440]	; (8000a88 <setMotor+0x26c>)
 80008ce:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(Motor1DirGrp, Motor1DirPin, PWM[0] > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008d0:	4b6d      	ldr	r3, [pc, #436]	; (8000a88 <setMotor+0x26c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	bfcc      	ite	gt
 80008d8:	2301      	movgt	r3, #1
 80008da:	2300      	movle	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	2110      	movs	r1, #16
 80008e2:	486a      	ldr	r0, [pc, #424]	; (8000a8c <setMotor+0x270>)
 80008e4:	f001 ffe4 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2DirGrp, Motor2DirPin, PWM[1] > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008e8:	4b67      	ldr	r3, [pc, #412]	; (8000a88 <setMotor+0x26c>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bfcc      	ite	gt
 80008f0:	2301      	movgt	r3, #1
 80008f2:	2300      	movle	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fc:	4863      	ldr	r0, [pc, #396]	; (8000a8c <setMotor+0x270>)
 80008fe:	f001 ffd7 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3DirGrp, Motor3DirPin, PWM[2] > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000902:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <setMotor+0x26c>)
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	bfcc      	ite	gt
 800090a:	2301      	movgt	r3, #1
 800090c:	2300      	movle	r3, #0
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f001 ffca 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4DirGrp, Motor4DirPin, PWM[3] > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800091c:	4b5a      	ldr	r3, [pc, #360]	; (8000a88 <setMotor+0x26c>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	bfcc      	ite	gt
 8000924:	2301      	movgt	r3, #1
 8000926:	2300      	movle	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	2120      	movs	r1, #32
 800092e:	4857      	ldr	r0, [pc, #348]	; (8000a8c <setMotor+0x270>)
 8000930:	f001 ffbe 	bl	80028b0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, abs(PWM[0]));
 8000934:	4b54      	ldr	r3, [pc, #336]	; (8000a88 <setMotor+0x26c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800093c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000940:	4b53      	ldr	r3, [pc, #332]	; (8000a90 <setMotor+0x274>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, abs(PWM[1]));
 8000946:	4b50      	ldr	r3, [pc, #320]	; (8000a88 <setMotor+0x26c>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800094e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <setMotor+0x274>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3, abs(PWM[2]));
 8000958:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <setMotor+0x26c>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000960:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000964:	4b4a      	ldr	r3, [pc, #296]	; (8000a90 <setMotor+0x274>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_4, abs(PWM[3]));
 800096a:	4b47      	ldr	r3, [pc, #284]	; (8000a88 <setMotor+0x26c>)
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000972:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000976:	4b46      	ldr	r3, [pc, #280]	; (8000a90 <setMotor+0x274>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	641a      	str	r2, [r3, #64]	; 0x40

	// servo
	if (!oldCarriage && ch_[8] > 1000){
 800097c:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <setMotor+0x278>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10d      	bne.n	80009a0 <setMotor+0x184>
 8000984:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <setMotor+0x268>)
 8000986:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800098a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800098e:	dd07      	ble.n	80009a0 <setMotor+0x184>
		setAngle(2, 135);
 8000990:	2187      	movs	r1, #135	; 0x87
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff fdd0 	bl	8000538 <setAngle>
		oldCarriage = 1;
 8000998:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <setMotor+0x278>)
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e010      	b.n	80009c2 <setMotor+0x1a6>
	}
	else if(oldCarriage && ch_[8] < 1000){
 80009a0:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <setMotor+0x278>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00c      	beq.n	80009c2 <setMotor+0x1a6>
 80009a8:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <setMotor+0x268>)
 80009aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80009ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009b2:	da06      	bge.n	80009c2 <setMotor+0x1a6>
		setAngle(2, 0);
 80009b4:	2100      	movs	r1, #0
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff fdbe 	bl	8000538 <setAngle>
		oldCarriage = 0;
 80009bc:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <setMotor+0x278>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
	}

	if (!oldArm && ch_[9] < 1000){
 80009c2:	4b35      	ldr	r3, [pc, #212]	; (8000a98 <setMotor+0x27c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d119      	bne.n	80009fe <setMotor+0x1e2>
 80009ca:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <setMotor+0x268>)
 80009cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009d4:	da13      	bge.n	80009fe <setMotor+0x1e2>
		setAngle(4, 35);
 80009d6:	2123      	movs	r1, #35	; 0x23
 80009d8:	2004      	movs	r0, #4
 80009da:	f7ff fdad 	bl	8000538 <setAngle>
		HAL_Delay(1000);
 80009de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e2:	f001 fc07 	bl	80021f4 <HAL_Delay>
		setAngle(5, 30);
 80009e6:	211e      	movs	r1, #30
 80009e8:	2005      	movs	r0, #5
 80009ea:	f7ff fda5 	bl	8000538 <setAngle>
		HAL_Delay(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f2:	f001 fbff 	bl	80021f4 <HAL_Delay>
		oldArm = 1;
 80009f6:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <setMotor+0x27c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	e01d      	b.n	8000a3a <setMotor+0x21e>
	}
	else if (oldArm && ch_[9] > 1000){
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <setMotor+0x27c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d019      	beq.n	8000a3a <setMotor+0x21e>
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <setMotor+0x268>)
 8000a08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a10:	dd13      	ble.n	8000a3a <setMotor+0x21e>
		setAngle(4, -90);
 8000a12:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8000a16:	2004      	movs	r0, #4
 8000a18:	f7ff fd8e 	bl	8000538 <setAngle>
		HAL_Delay(1000);
 8000a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a20:	f001 fbe8 	bl	80021f4 <HAL_Delay>
		setAngle(5, 75);
 8000a24:	214b      	movs	r1, #75	; 0x4b
 8000a26:	2005      	movs	r0, #5
 8000a28:	f7ff fd86 	bl	8000538 <setAngle>
		HAL_Delay(1000);
 8000a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a30:	f001 fbe0 	bl	80021f4 <HAL_Delay>
		oldArm = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <setMotor+0x27c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
	}

	if (oldGrab && ch_[7] > 1000){
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <setMotor+0x280>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00d      	beq.n	8000a5e <setMotor+0x242>
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <setMotor+0x268>)
 8000a44:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a4c:	dd07      	ble.n	8000a5e <setMotor+0x242>
		setAngle(1, 0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fd71 	bl	8000538 <setAngle>
		oldGrab = 0;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <setMotor+0x280>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
//		TIM15->CCR1 = 500;
//	}
//	else{
//		TIM15->CCR1 = 0;
//	}
}
 8000a5c:	e010      	b.n	8000a80 <setMotor+0x264>
	else if(!oldGrab && ch_[7] < 1000){
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <setMotor+0x280>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10c      	bne.n	8000a80 <setMotor+0x264>
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <setMotor+0x268>)
 8000a68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a70:	da06      	bge.n	8000a80 <setMotor+0x264>
		setAngle(1, 70);
 8000a72:	2146      	movs	r1, #70	; 0x46
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff fd5f 	bl	8000538 <setAngle>
		oldGrab = 1;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <setMotor+0x280>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000006c 	.word	0x2000006c
 8000a88:	2000002c 	.word	0x2000002c
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	20000090 	.word	0x20000090
 8000a94:	20000048 	.word	0x20000048
 8000a98:	20000040 	.word	0x20000040
 8000a9c:	20000044 	.word	0x20000044

08000aa0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_UART_RxCpltCallback+0x3c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d10e      	bne.n	8000ad2 <HAL_UART_RxCpltCallback+0x32>
		if (UART1_rxBuffer[0] != 0x0f){
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_UART_RxCpltCallback+0x40>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d005      	beq.n	8000ac8 <HAL_UART_RxCpltCallback+0x28>
			HAL_UART_Receive(&huart1, UART1_tmpBuffer, 1, 100);
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <HAL_UART_RxCpltCallback+0x44>)
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <HAL_UART_RxCpltCallback+0x3c>)
 8000ac4:	f005 f89e 	bl	8005c04 <HAL_UART_Receive>
		}
		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, UART1_BufferSize);
 8000ac8:	2219      	movs	r2, #25
 8000aca:	4905      	ldr	r1, [pc, #20]	; (8000ae0 <HAL_UART_RxCpltCallback+0x40>)
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <HAL_UART_RxCpltCallback+0x3c>)
 8000ace:	f005 f96b 	bl	8005da8 <HAL_UART_Receive_IT>
	}
	else if (huart->Instance == huart3.Instance){
		// 0x05 0x1C cmd n id success checksum
//		pingDone = 1;
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200002c8 	.word	0x200002c8
 8000ae0:	2000004c 	.word	0x2000004c
 8000ae4:	20000068 	.word	0x20000068

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f001 fb06 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f866 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 fd72 	bl	80015dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000af8:	f000 fd10 	bl	800151c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000afc:	f000 f8b2 	bl	8000c64 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b00:	f000 f956 	bl	8000db0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b04:	f000 f9f4 	bl	8000ef0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b08:	f000 fa92 	bl	8001030 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b0c:	f000 fb30 	bl	8001170 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000b10:	f000 fbfe 	bl	8001310 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000b14:	f000 fcce 	bl	80014b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b18:	f000 fd30 	bl	800157c <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000b1c:	f000 fc9a 	bl	8001454 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  // Motor
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000b20:	2100      	movs	r1, #0
 8000b22:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <main+0xc0>)
 8000b24:	f003 fb2a 	bl	800417c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8000b28:	2104      	movs	r1, #4
 8000b2a:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <main+0xc0>)
 8000b2c:	f003 fb26 	bl	800417c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8000b30:	2108      	movs	r1, #8
 8000b32:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <main+0xc0>)
 8000b34:	f003 fb22 	bl	800417c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8000b38:	210c      	movs	r1, #12
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <main+0xc0>)
 8000b3c:	f003 fb1e 	bl	800417c <HAL_TIM_PWM_Start>
  MotorStop();
 8000b40:	f7ff fcbe 	bl	80004c0 <MotorStop>

  // Servo
//  servoPing();

  // Stepper
  HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 8000b44:	2100      	movs	r1, #0
 8000b46:	4819      	ldr	r0, [pc, #100]	; (8000bac <main+0xc4>)
 8000b48:	f003 fb18 	bl	800417c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 8000b4c:	4817      	ldr	r0, [pc, #92]	; (8000bac <main+0xc4>)
 8000b4e:	f003 fa43 	bl	8003fd8 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_1, 0);
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <main+0xc4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <main+0xc8>)
 8000b60:	f001 fea6 	bl	80028b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <main+0xcc>)
 8000b6c:	f001 fea0 	bl	80028b0 <HAL_GPIO_WritePin>
//	  TIM15->CCR1 = 500;
//  }
//  else{
//	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
//  }
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2120      	movs	r1, #32
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f001 fe9a 	bl	80028b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f001 fe93 	bl	80028b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <main+0xc8>)
 8000b90:	f001 fe8e 	bl	80028b0 <HAL_GPIO_WritePin>
  // Communication
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, UART1_BufferSize);
 8000b94:	2219      	movs	r2, #25
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <main+0xd0>)
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <main+0xd4>)
 8000b9a:	f005 f905 	bl	8005da8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	SBUS_Data();
 8000b9e:	f7ff fd27 	bl	80005f0 <SBUS_Data>
	setMotor();
 8000ba2:	f7ff fe3b 	bl	800081c <setMotor>
	SBUS_Data();
 8000ba6:	e7fa      	b.n	8000b9e <main+0xb6>
 8000ba8:	20000090 	.word	0x20000090
 8000bac:	200001ac 	.word	0x200001ac
 8000bb0:	48000800 	.word	0x48000800
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	2000004c 	.word	0x2000004c
 8000bbc:	200002c8 	.word	0x200002c8

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b096      	sub	sp, #88	; 0x58
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2244      	movs	r2, #68	; 0x44
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 f92e 	bl	8006e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000be2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000be6:	f001 fea1 	bl	800292c <HAL_PWREx_ControlVoltageScaling>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bf0:	f000 fdfe 	bl	80017f0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfe:	2310      	movs	r3, #16
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c02:	2302      	movs	r3, #2
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c06:	2302      	movs	r3, #2
 8000c08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c0e:	230a      	movs	r3, #10
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c12:	2307      	movs	r3, #7
 8000c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fed8 	bl	80029d8 <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c2e:	f000 fddf 	bl	80017f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	230f      	movs	r3, #15
 8000c34:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c36:	2303      	movs	r3, #3
 8000c38:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 faaa 	bl	80031a4 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c56:	f000 fdcb 	bl	80017f0 <Error_Handler>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3758      	adds	r7, #88	; 0x58
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b090      	sub	sp, #64	; 0x40
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	463b      	mov	r3, r7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ca0:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000ca2:	4a42      	ldr	r2, [pc, #264]	; (8000dac <MX_TIM1_Init+0x148>)
 8000ca4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000ca6:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000ca8:	224f      	movs	r2, #79	; 0x4f
 8000caa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cb2:	4b3d      	ldr	r3, [pc, #244]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cba:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cc0:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ccc:	4836      	ldr	r0, [pc, #216]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000cce:	f003 f92b 	bl	8003f28 <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000cd8:	f000 fd8a 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ce2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	482f      	ldr	r0, [pc, #188]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000cea:	f003 fe71 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000cf4:	f000 fd7c 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000cf8:	482b      	ldr	r0, [pc, #172]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000cfa:	f003 fb45 	bl	8004388 <HAL_TIM_IC_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d04:	f000 fd74 	bl	80017f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d0c:	2350      	movs	r3, #80	; 0x50
 8000d0e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4821      	ldr	r0, [pc, #132]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000d24:	f003 ff1a 	bl	8004b5c <HAL_TIM_SlaveConfigSynchro>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000d2e:	f000 fd5f 	bl	80017f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d36:	2301      	movs	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4817      	ldr	r0, [pc, #92]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000d4c:	f003 fc9c 	bl	8004688 <HAL_TIM_IC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000d56:	f000 fd4b 	bl	80017f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	2204      	movs	r2, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000d6c:	f003 fc8c 	bl	8004688 <HAL_TIM_IC_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000d76:	f000 fd3b 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <MX_TIM1_Init+0x144>)
 8000d8c:	f004 fd34 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000d96:	f000 fd2b 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  sConfigIC.ICPrescaler = USER_TIM_ICPSC_DIV;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	617b      	str	r3, [r7, #20]
  /* USER CODE END TIM1_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3740      	adds	r7, #64	; 0x40
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000034c 	.word	0x2000034c
 8000dac:	40012c00 	.word	0x40012c00

08000db0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b090      	sub	sp, #64	; 0x40
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dec:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000df6:	224f      	movs	r2, #79	; 0x4f
 8000df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e00:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b38      	ldr	r3, [pc, #224]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e14:	4835      	ldr	r0, [pc, #212]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000e16:	f003 f887 	bl	8003f28 <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e20:	f000 fce6 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e2e:	4619      	mov	r1, r3
 8000e30:	482e      	ldr	r0, [pc, #184]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000e32:	f003 fdcd 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e3c:	f000 fcd8 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000e42:	f003 faa1 	bl	8004388 <HAL_TIM_IC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e4c:	f000 fcd0 	bl	80017f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e50:	2304      	movs	r3, #4
 8000e52:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e54:	2350      	movs	r3, #80	; 0x50
 8000e56:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4820      	ldr	r0, [pc, #128]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000e6c:	f003 fe76 	bl	8004b5c <HAL_TIM_SlaveConfigSynchro>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000e76:	f000 fcbb 	bl	80017f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4619      	mov	r1, r3
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000e94:	f003 fbf8 	bl	8004688 <HAL_TIM_IC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000e9e:	f000 fca7 	bl	80017f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2204      	movs	r2, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000eb4:	f003 fbe8 	bl	8004688 <HAL_TIM_IC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8000ebe:	f000 fc97 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM2_Init+0x13c>)
 8000ed0:	f004 fc92 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8000eda:	f000 fc89 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  sConfigIC.ICPrescaler = USER_TIM_ICPSC_DIV;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	617b      	str	r3, [r7, #20]
  /* USER CODE END TIM2_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3740      	adds	r7, #64	; 0x40
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000398 	.word	0x20000398

08000ef0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b090      	sub	sp, #64	; 0x40
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_TIM3_Init+0x138>)
 8000f2e:	4a3f      	ldr	r2, [pc, #252]	; (800102c <MX_TIM3_Init+0x13c>)
 8000f30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000f32:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <MX_TIM3_Init+0x138>)
 8000f34:	224f      	movs	r2, #79	; 0x4f
 8000f36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <MX_TIM3_Init+0x138>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_TIM3_Init+0x138>)
 8000f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <MX_TIM3_Init+0x138>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b36      	ldr	r3, [pc, #216]	; (8001028 <MX_TIM3_Init+0x138>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f52:	4835      	ldr	r0, [pc, #212]	; (8001028 <MX_TIM3_Init+0x138>)
 8000f54:	f002 ffe8 	bl	8003f28 <HAL_TIM_Base_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000f5e:	f000 fc47 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	482e      	ldr	r0, [pc, #184]	; (8001028 <MX_TIM3_Init+0x138>)
 8000f70:	f003 fd2e 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000f7a:	f000 fc39 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f7e:	482a      	ldr	r0, [pc, #168]	; (8001028 <MX_TIM3_Init+0x138>)
 8000f80:	f003 fa02 	bl	8004388 <HAL_TIM_IC_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f8a:	f000 fc31 	bl	80017f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f92:	2350      	movs	r3, #80	; 0x50
 8000f94:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481f      	ldr	r0, [pc, #124]	; (8001028 <MX_TIM3_Init+0x138>)
 8000faa:	f003 fdd7 	bl	8004b5c <HAL_TIM_SlaveConfigSynchro>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000fb4:	f000 fc1c 	bl	80017f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4815      	ldr	r0, [pc, #84]	; (8001028 <MX_TIM3_Init+0x138>)
 8000fd2:	f003 fb59 	bl	8004688 <HAL_TIM_IC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000fdc:	f000 fc08 	bl	80017f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2204      	movs	r2, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM3_Init+0x138>)
 8000ff2:	f003 fb49 	bl	8004688 <HAL_TIM_IC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8000ffc:	f000 fbf8 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM3_Init+0x138>)
 800100e:	f004 fbf3 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8001018:	f000 fbea 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  sConfigIC.ICPrescaler = USER_TIM_ICPSC_DIV;
 800101c:	2308      	movs	r3, #8
 800101e:	617b      	str	r3, [r7, #20]
  /* USER CODE END TIM3_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3740      	adds	r7, #64	; 0x40
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001f8 	.word	0x200001f8
 800102c:	40000400 	.word	0x40000400

08001030 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	; 0x40
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800106c:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_TIM4_Init+0x138>)
 800106e:	4a3f      	ldr	r2, [pc, #252]	; (800116c <MX_TIM4_Init+0x13c>)
 8001070:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <MX_TIM4_Init+0x138>)
 8001074:	224f      	movs	r2, #79	; 0x4f
 8001076:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <MX_TIM4_Init+0x138>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800107e:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <MX_TIM4_Init+0x138>)
 8001080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001084:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <MX_TIM4_Init+0x138>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <MX_TIM4_Init+0x138>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001092:	4835      	ldr	r0, [pc, #212]	; (8001168 <MX_TIM4_Init+0x138>)
 8001094:	f002 ff48 	bl	8003f28 <HAL_TIM_Base_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800109e:	f000 fba7 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ac:	4619      	mov	r1, r3
 80010ae:	482e      	ldr	r0, [pc, #184]	; (8001168 <MX_TIM4_Init+0x138>)
 80010b0:	f003 fc8e 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80010ba:	f000 fb99 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80010be:	482a      	ldr	r0, [pc, #168]	; (8001168 <MX_TIM4_Init+0x138>)
 80010c0:	f003 f962 	bl	8004388 <HAL_TIM_IC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80010ca:	f000 fb91 	bl	80017f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010ce:	2304      	movs	r3, #4
 80010d0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010d2:	2350      	movs	r3, #80	; 0x50
 80010d4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <MX_TIM4_Init+0x138>)
 80010ea:	f003 fd37 	bl	8004b5c <HAL_TIM_SlaveConfigSynchro>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80010f4:	f000 fb7c 	bl	80017f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	4619      	mov	r1, r3
 8001110:	4815      	ldr	r0, [pc, #84]	; (8001168 <MX_TIM4_Init+0x138>)
 8001112:	f003 fab9 	bl	8004688 <HAL_TIM_IC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 800111c:	f000 fb68 	bl	80017f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001120:	2302      	movs	r3, #2
 8001122:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001124:	2302      	movs	r3, #2
 8001126:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2204      	movs	r2, #4
 800112e:	4619      	mov	r1, r3
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_TIM4_Init+0x138>)
 8001132:	f003 faa9 	bl	8004688 <HAL_TIM_IC_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 800113c:	f000 fb58 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_TIM4_Init+0x138>)
 800114e:	f004 fb53 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 8001158:	f000 fb4a 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  sConfigIC.ICPrescaler = USER_TIM_ICPSC_DIV;
 800115c:	2308      	movs	r3, #8
 800115e:	617b      	str	r3, [r7, #20]
  /* USER CODE END TIM4_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3740      	adds	r7, #64	; 0x40
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000dc 	.word	0x200000dc
 800116c:	40000800 	.word	0x40000800

08001170 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09a      	sub	sp, #104	; 0x68
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	222c      	movs	r2, #44	; 0x2c
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 fe40 	bl	8006e30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011b0:	4b55      	ldr	r3, [pc, #340]	; (8001308 <MX_TIM8_Init+0x198>)
 80011b2:	4a56      	ldr	r2, [pc, #344]	; (800130c <MX_TIM8_Init+0x19c>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 80011b6:	4b54      	ldr	r3, [pc, #336]	; (8001308 <MX_TIM8_Init+0x198>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b52      	ldr	r3, [pc, #328]	; (8001308 <MX_TIM8_Init+0x198>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80011c2:	4b51      	ldr	r3, [pc, #324]	; (8001308 <MX_TIM8_Init+0x198>)
 80011c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <MX_TIM8_Init+0x198>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011d0:	4b4d      	ldr	r3, [pc, #308]	; (8001308 <MX_TIM8_Init+0x198>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <MX_TIM8_Init+0x198>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011dc:	484a      	ldr	r0, [pc, #296]	; (8001308 <MX_TIM8_Init+0x198>)
 80011de:	f002 fea3 	bl	8003f28 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f000 fb02 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011f6:	4619      	mov	r1, r3
 80011f8:	4843      	ldr	r0, [pc, #268]	; (8001308 <MX_TIM8_Init+0x198>)
 80011fa:	f003 fbe9 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001204:	f000 faf4 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001208:	483f      	ldr	r0, [pc, #252]	; (8001308 <MX_TIM8_Init+0x198>)
 800120a:	f002 ff55 	bl	80040b8 <HAL_TIM_PWM_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001214:	f000 faec 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001224:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001228:	4619      	mov	r1, r3
 800122a:	4837      	ldr	r0, [pc, #220]	; (8001308 <MX_TIM8_Init+0x198>)
 800122c:	f004 fae4 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001236:	f000 fadb 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	; 0x60
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	482a      	ldr	r0, [pc, #168]	; (8001308 <MX_TIM8_Init+0x198>)
 8001260:	f003 faa6 	bl	80047b0 <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800126a:	f000 fac1 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800126e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001272:	2204      	movs	r2, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4824      	ldr	r0, [pc, #144]	; (8001308 <MX_TIM8_Init+0x198>)
 8001278:	f003 fa9a 	bl	80047b0 <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001282:	f000 fab5 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800128a:	2208      	movs	r2, #8
 800128c:	4619      	mov	r1, r3
 800128e:	481e      	ldr	r0, [pc, #120]	; (8001308 <MX_TIM8_Init+0x198>)
 8001290:	f003 fa8e 	bl	80047b0 <HAL_TIM_PWM_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 800129a:	f000 faa9 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	220c      	movs	r2, #12
 80012a4:	4619      	mov	r1, r3
 80012a6:	4818      	ldr	r0, [pc, #96]	; (8001308 <MX_TIM8_Init+0x198>)
 80012a8:	f003 fa82 	bl	80047b0 <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 80012b2:	f000 fa9d 	bl	80017f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <MX_TIM8_Init+0x198>)
 80012ec:	f004 fb0c 	bl	8005908 <HAL_TIMEx_ConfigBreakDeadTime>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 80012f6:	f000 fa7b 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <MX_TIM8_Init+0x198>)
 80012fc:	f000 fc00 	bl	8001b00 <HAL_TIM_MspPostInit>

}
 8001300:	bf00      	nop
 8001302:	3768      	adds	r7, #104	; 0x68
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000090 	.word	0x20000090
 800130c:	40013400 	.word	0x40013400

08001310 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b09a      	sub	sp, #104	; 0x68
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001330:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	222c      	movs	r2, #44	; 0x2c
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f005 fd70 	bl	8006e30 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001350:	4b3e      	ldr	r3, [pc, #248]	; (800144c <MX_TIM15_Init+0x13c>)
 8001352:	4a3f      	ldr	r2, [pc, #252]	; (8001450 <MX_TIM15_Init+0x140>)
 8001354:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <MX_TIM15_Init+0x13c>)
 8001358:	224f      	movs	r2, #79	; 0x4f
 800135a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <MX_TIM15_Init+0x13c>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <MX_TIM15_Init+0x13c>)
 8001364:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001368:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <MX_TIM15_Init+0x13c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <MX_TIM15_Init+0x13c>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <MX_TIM15_Init+0x13c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800137c:	4833      	ldr	r0, [pc, #204]	; (800144c <MX_TIM15_Init+0x13c>)
 800137e:	f002 fdd3 	bl	8003f28 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001388:	f000 fa32 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001396:	4619      	mov	r1, r3
 8001398:	482c      	ldr	r0, [pc, #176]	; (800144c <MX_TIM15_Init+0x13c>)
 800139a:	f003 fb19 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80013a4:	f000 fa24 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013a8:	4828      	ldr	r0, [pc, #160]	; (800144c <MX_TIM15_Init+0x13c>)
 80013aa:	f002 fe85 	bl	80040b8 <HAL_TIM_PWM_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80013b4:	f000 fa1c 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013c4:	4619      	mov	r1, r3
 80013c6:	4821      	ldr	r0, [pc, #132]	; (800144c <MX_TIM15_Init+0x13c>)
 80013c8:	f004 fa16 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80013d2:	f000 fa0d 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	; 0x60
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_TIM15_Init+0x13c>)
 80013fc:	f003 f9d8 	bl	80047b0 <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001406:	f000 f9f3 	bl	80017f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800141e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001422:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM15_Init+0x13c>)
 800142e:	f004 fa6b 	bl	8005908 <HAL_TIMEx_ConfigBreakDeadTime>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8001438:	f000 f9da 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM15_Init+0x13c>)
 800143e:	f000 fb5f 	bl	8001b00 <HAL_TIM_MspPostInit>

}
 8001442:	bf00      	nop
 8001444:	3768      	adds	r7, #104	; 0x68
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200001ac 	.word	0x200001ac
 8001450:	40014000 	.word	0x40014000

08001454 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_UART5_Init+0x58>)
 800145a:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <MX_UART5_Init+0x5c>)
 800145c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_UART5_Init+0x58>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_UART5_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_UART5_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_UART5_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_UART5_Init+0x58>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_UART5_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_UART5_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_UART5_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_UART5_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_UART5_Init+0x58>)
 8001498:	f004 fad2 	bl	8005a40 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80014a2:	f000 f9a5 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000244 	.word	0x20000244
 80014b0:	40005000 	.word	0x40005000

080014b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <MX_USART1_UART_Init+0x60>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014c0:	4a15      	ldr	r2, [pc, #84]	; (8001518 <MX_USART1_UART_Init+0x64>)
 80014c2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014de:	2204      	movs	r2, #4
 80014e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014fc:	f004 faa0 	bl	8005a40 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001506:	f000 f973 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002c8 	.word	0x200002c8
 8001514:	40013800 	.word	0x40013800
 8001518:	000186a0 	.word	0x000186a0

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <MX_USART2_UART_Init+0x5c>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART2_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART2_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001560:	f004 fa6e 	bl	8005a40 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800156a:	f000 f941 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200003e4 	.word	0x200003e4
 8001578:	40004400 	.word	0x40004400

0800157c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <MX_USART3_UART_Init+0x5c>)
 8001584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015c0:	f004 fa3e 	bl	8005a40 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015ca:	f000 f911 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000128 	.word	0x20000128
 80015d8:	40004800 	.word	0x40004800

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	4b68      	ldr	r3, [pc, #416]	; (8001794 <MX_GPIO_Init+0x1b8>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a67      	ldr	r2, [pc, #412]	; (8001794 <MX_GPIO_Init+0x1b8>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b65      	ldr	r3, [pc, #404]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	4b62      	ldr	r3, [pc, #392]	; (8001794 <MX_GPIO_Init+0x1b8>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a61      	ldr	r2, [pc, #388]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b5f      	ldr	r3, [pc, #380]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b5c      	ldr	r3, [pc, #368]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a5b      	ldr	r2, [pc, #364]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b59      	ldr	r3, [pc, #356]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b56      	ldr	r3, [pc, #344]	; (8001794 <MX_GPIO_Init+0x1b8>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a55      	ldr	r2, [pc, #340]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b53      	ldr	r3, [pc, #332]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001652:	4b50      	ldr	r3, [pc, #320]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4a4f      	ldr	r2, [pc, #316]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165e:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <MX_GPIO_Init+0x1b8>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2101      	movs	r1, #1
 800166e:	484a      	ldr	r0, [pc, #296]	; (8001798 <MX_GPIO_Init+0x1bc>)
 8001670:	f001 f91e 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_11, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f001 f917 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f242 4130 	movw	r1, #9264	; 0x2430
 8001688:	4844      	ldr	r0, [pc, #272]	; (800179c <MX_GPIO_Init+0x1c0>)
 800168a:	f001 f911 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800168e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001694:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <MX_GPIO_Init+0x1c4>)
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	483d      	ldr	r0, [pc, #244]	; (8001798 <MX_GPIO_Init+0x1bc>)
 80016a4:	f000 ff5a 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a8:	2301      	movs	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4836      	ldr	r0, [pc, #216]	; (8001798 <MX_GPIO_Init+0x1bc>)
 80016c0:	f000 ff4c 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10
 80016c4:	f640 430e 	movw	r3, #3086	; 0xc0e
 80016c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ca:	2303      	movs	r3, #3
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	482f      	ldr	r0, [pc, #188]	; (8001798 <MX_GPIO_Init+0x1bc>)
 80016da:	f000 ff3f 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_15;
 80016de:	f249 0312 	movw	r3, #36882	; 0x9012
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e4:	2303      	movs	r3, #3
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f000 ff31 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_11;
 80016fa:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001716:	f000 ff21 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB15 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800171a:	f649 3383 	movw	r3, #39811	; 0x9b83
 800171e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001720:	2303      	movs	r3, #3
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	481b      	ldr	r0, [pc, #108]	; (800179c <MX_GPIO_Init+0x1c0>)
 8001730:	f000 ff14 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001734:	2304      	movs	r3, #4
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_GPIO_Init+0x1c4>)
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173c:	2301      	movs	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <MX_GPIO_Init+0x1c0>)
 8001748:	f000 ff08 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 800174c:	f242 4330 	movw	r3, #9264	; 0x2430
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_GPIO_Init+0x1c0>)
 8001766:	f000 fef9 	bl	800255c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2008      	movs	r0, #8
 8001770:	f000 fe3f 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001774:	2008      	movs	r0, #8
 8001776:	f000 fe58 	bl	800242a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2028      	movs	r0, #40	; 0x28
 8001780:	f000 fe37 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001784:	2028      	movs	r0, #40	; 0x28
 8001786:	f000 fe50 	bl	800242a <HAL_NVIC_EnableIRQ>

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	48000800 	.word	0x48000800
 800179c:	48000400 	.word	0x48000400
 80017a0:	10210000 	.word	0x10210000

080017a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2){
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d10b      	bne.n	80017cc <HAL_GPIO_EXTI_Callback+0x28>
		TIM15->CCR1 = 0;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x30>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34
		currentStepperPosition = 0;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2120      	movs	r1, #32
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c8:	f001 f872 	bl	80028b0 <HAL_GPIO_WritePin>
	}
	else if (GPIO_Pin == B1_Pin){
	}
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40014000 	.word	0x40014000
 80017d8:	2000003c 	.word	0x2000003c

080017dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
//	if (htim->Instance == htim15.Instance){
//		if (TIM15->CCR1){
//			currentStepperPosition += stepperDir;
//		}
//	}
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_MspInit+0x44>)
 8001804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_MspInit+0x44>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6613      	str	r3, [r2, #96]	; 0x60
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x44>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_MspInit+0x44>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_MspInit+0x44>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	6593      	str	r3, [r2, #88]	; 0x58
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_MspInit+0x44>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b092      	sub	sp, #72	; 0x48
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4aa0      	ldr	r2, [pc, #640]	; (8001ae4 <HAL_TIM_Base_MspInit+0x2a0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d14a      	bne.n	80018fc <HAL_TIM_Base_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001866:	4ba0      	ldr	r3, [pc, #640]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186a:	4a9f      	ldr	r2, [pc, #636]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 800186c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001870:	6613      	str	r3, [r2, #96]	; 0x60
 8001872:	4b9d      	ldr	r3, [pc, #628]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
 800187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b9a      	ldr	r3, [pc, #616]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a99      	ldr	r2, [pc, #612]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b97      	ldr	r3, [pc, #604]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b6:	f000 fe51 	bl	800255c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2018      	movs	r0, #24
 80018c0:	f000 fd97 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80018c4:	2018      	movs	r0, #24
 80018c6:	f000 fdb0 	bl	800242a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2019      	movs	r0, #25
 80018d0:	f000 fd8f 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018d4:	2019      	movs	r0, #25
 80018d6:	f000 fda8 	bl	800242a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	201a      	movs	r0, #26
 80018e0:	f000 fd87 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80018e4:	201a      	movs	r0, #26
 80018e6:	f000 fda0 	bl	800242a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201b      	movs	r0, #27
 80018f0:	f000 fd7f 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018f4:	201b      	movs	r0, #27
 80018f6:	f000 fd98 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80018fa:	e0ee      	b.n	8001ada <HAL_TIM_Base_MspInit+0x296>
  else if(htim_base->Instance==TIM2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001904:	d131      	bne.n	800196a <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001906:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	4a77      	ldr	r2, [pc, #476]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6593      	str	r3, [r2, #88]	; 0x58
 8001912:	4b75      	ldr	r3, [pc, #468]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
 800191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b72      	ldr	r3, [pc, #456]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a71      	ldr	r2, [pc, #452]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001936:	2301      	movs	r3, #1
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001946:	2301      	movs	r3, #1
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800194e:	4619      	mov	r1, r3
 8001950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001954:	f000 fe02 	bl	800255c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	201c      	movs	r0, #28
 800195e:	f000 fd48 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001962:	201c      	movs	r0, #28
 8001964:	f000 fd61 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8001968:	e0b7      	b.n	8001ada <HAL_TIM_Base_MspInit+0x296>
  else if(htim_base->Instance==TIM3)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5f      	ldr	r2, [pc, #380]	; (8001aec <HAL_TIM_Base_MspInit+0x2a8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d131      	bne.n	80019d8 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001974:	4b5c      	ldr	r3, [pc, #368]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	4a5b      	ldr	r2, [pc, #364]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	6593      	str	r3, [r2, #88]	; 0x58
 8001980:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	623b      	str	r3, [r7, #32]
 800198a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	4a55      	ldr	r2, [pc, #340]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a4:	2340      	movs	r3, #64	; 0x40
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019b4:	2302      	movs	r3, #2
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019bc:	4619      	mov	r1, r3
 80019be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c2:	f000 fdcb 	bl	800255c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	201d      	movs	r0, #29
 80019cc:	f000 fd11 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019d0:	201d      	movs	r0, #29
 80019d2:	f000 fd2a 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 80019d6:	e080      	b.n	8001ada <HAL_TIM_Base_MspInit+0x296>
  else if(htim_base->Instance==TIM4)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a44      	ldr	r2, [pc, #272]	; (8001af0 <HAL_TIM_Base_MspInit+0x2ac>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d130      	bne.n	8001a44 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6593      	str	r3, [r2, #88]	; 0x58
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a22:	2302      	movs	r3, #2
 8001a24:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4831      	ldr	r0, [pc, #196]	; (8001af4 <HAL_TIM_Base_MspInit+0x2b0>)
 8001a2e:	f000 fd95 	bl	800255c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	201e      	movs	r0, #30
 8001a38:	f000 fcdb 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a3c:	201e      	movs	r0, #30
 8001a3e:	f000 fcf4 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8001a42:	e04a      	b.n	8001ada <HAL_TIM_Base_MspInit+0x296>
  else if(htim_base->Instance==TIM8)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2b      	ldr	r2, [pc, #172]	; (8001af8 <HAL_TIM_Base_MspInit+0x2b4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d12c      	bne.n	8001aa8 <HAL_TIM_Base_MspInit+0x264>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	4a25      	ldr	r2, [pc, #148]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001a54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a58:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	202b      	movs	r0, #43	; 0x2b
 8001a6c:	f000 fcc1 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8001a70:	202b      	movs	r0, #43	; 0x2b
 8001a72:	f000 fcda 	bl	800242a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	202c      	movs	r0, #44	; 0x2c
 8001a7c:	f000 fcb9 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001a80:	202c      	movs	r0, #44	; 0x2c
 8001a82:	f000 fcd2 	bl	800242a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	202d      	movs	r0, #45	; 0x2d
 8001a8c:	f000 fcb1 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 8001a90:	202d      	movs	r0, #45	; 0x2d
 8001a92:	f000 fcca 	bl	800242a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	202e      	movs	r0, #46	; 0x2e
 8001a9c:	f000 fca9 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001aa0:	202e      	movs	r0, #46	; 0x2e
 8001aa2:	f000 fcc2 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8001aa6:	e018      	b.n	8001ada <HAL_TIM_Base_MspInit+0x296>
  else if(htim_base->Instance==TIM15)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <HAL_TIM_Base_MspInit+0x2b8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d113      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x296>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6613      	str	r3, [r2, #96]	; 0x60
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2a4>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2018      	movs	r0, #24
 8001ad0:	f000 fc8f 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ad4:	2018      	movs	r0, #24
 8001ad6:	f000 fca8 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3748      	adds	r7, #72	; 0x48
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40000800 	.word	0x40000800
 8001af4:	48000400 	.word	0x48000400
 8001af8:	40013400 	.word	0x40013400
 8001afc:	40014000 	.word	0x40014000

08001b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a23      	ldr	r2, [pc, #140]	; (8001bac <HAL_TIM_MspPostInit+0xac>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d11d      	bne.n	8001b5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001b3a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4817      	ldr	r0, [pc, #92]	; (8001bb4 <HAL_TIM_MspPostInit+0xb4>)
 8001b58:	f000 fd00 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b5c:	e021      	b.n	8001ba2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <HAL_TIM_MspPostInit+0xb8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d11c      	bne.n	8001ba2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001b92:	230e      	movs	r3, #14
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4807      	ldr	r0, [pc, #28]	; (8001bbc <HAL_TIM_MspPostInit+0xbc>)
 8001b9e:	f000 fcdd 	bl	800255c <HAL_GPIO_Init>
}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	; 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40013400 	.word	0x40013400
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	40014000 	.word	0x40014000
 8001bbc:	48000400 	.word	0x48000400

08001bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0b2      	sub	sp, #200	; 0xc8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bdc:	2288      	movs	r2, #136	; 0x88
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f005 f925 	bl	8006e30 <memset>
  if(huart->Instance==UART5)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4aa5      	ldr	r2, [pc, #660]	; (8001e80 <HAL_UART_MspInit+0x2c0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d165      	bne.n	8001cbc <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fcd7 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c08:	f7ff fdf2 	bl	80017f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c0c:	4b9d      	ldr	r3, [pc, #628]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	4a9c      	ldr	r2, [pc, #624]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c16:	6593      	str	r3, [r2, #88]	; 0x58
 8001c18:	4b9a      	ldr	r3, [pc, #616]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c24:	4b97      	ldr	r3, [pc, #604]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	4a96      	ldr	r2, [pc, #600]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c30:	4b94      	ldr	r3, [pc, #592]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3c:	4b91      	ldr	r3, [pc, #580]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	4a90      	ldr	r2, [pc, #576]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c48:	4b8e      	ldr	r3, [pc, #568]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	623b      	str	r3, [r7, #32]
 8001c52:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4883      	ldr	r0, [pc, #524]	; (8001e88 <HAL_UART_MspInit+0x2c8>)
 8001c7c:	f000 fc6e 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c80:	2304      	movs	r3, #4
 8001c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4879      	ldr	r0, [pc, #484]	; (8001e8c <HAL_UART_MspInit+0x2cc>)
 8001ca6:	f000 fc59 	bl	800255c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2035      	movs	r0, #53	; 0x35
 8001cb0:	f000 fb9f 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001cb4:	2035      	movs	r0, #53	; 0x35
 8001cb6:	f000 fbb8 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cba:	e0dc      	b.n	8001e76 <HAL_UART_MspInit+0x2b6>
  else if(huart->Instance==USART1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a73      	ldr	r2, [pc, #460]	; (8001e90 <HAL_UART_MspInit+0x2d0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d145      	bne.n	8001d52 <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 fc6c 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8001cde:	f7ff fd87 	bl	80017f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce2:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	4a67      	ldr	r2, [pc, #412]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6613      	str	r3, [r2, #96]	; 0x60
 8001cee:	4b65      	ldr	r3, [pc, #404]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	4b62      	ldr	r3, [pc, #392]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	4a61      	ldr	r2, [pc, #388]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d06:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f000 fc0e 	bl	800255c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	2025      	movs	r0, #37	; 0x25
 8001d46:	f000 fb54 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d4a:	2025      	movs	r0, #37	; 0x25
 8001d4c:	f000 fb6d 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8001d50:	e091      	b.n	8001e76 <HAL_UART_MspInit+0x2b6>
  else if(huart->Instance==USART2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a4f      	ldr	r2, [pc, #316]	; (8001e94 <HAL_UART_MspInit+0x2d4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d144      	bne.n	8001de6 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fc21 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8001d74:	f7ff fd3c 	bl	80017f0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d78:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a41      	ldr	r2, [pc, #260]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	4a3b      	ldr	r2, [pc, #236]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001da8:	230c      	movs	r3, #12
 8001daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc0:	2307      	movs	r3, #7
 8001dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd0:	f000 fbc4 	bl	800255c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2026      	movs	r0, #38	; 0x26
 8001dda:	f000 fb0a 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dde:	2026      	movs	r0, #38	; 0x26
 8001de0:	f000 fb23 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8001de4:	e047      	b.n	8001e76 <HAL_UART_MspInit+0x2b6>
  else if(huart->Instance==USART3)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2b      	ldr	r2, [pc, #172]	; (8001e98 <HAL_UART_MspInit+0x2d8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d142      	bne.n	8001e76 <HAL_UART_MspInit+0x2b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001df0:	2304      	movs	r3, #4
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f001 fbd7 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8001e08:	f7ff fcf2 	bl	80017f0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e16:	6593      	str	r3, [r2, #88]	; 0x58
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_UART_MspInit+0x2c4>)
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e3c:	2330      	movs	r3, #48	; 0x30
 8001e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e54:	2307      	movs	r3, #7
 8001e56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4809      	ldr	r0, [pc, #36]	; (8001e88 <HAL_UART_MspInit+0x2c8>)
 8001e62:	f000 fb7b 	bl	800255c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2027      	movs	r0, #39	; 0x27
 8001e6c:	f000 fac1 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e70:	2027      	movs	r0, #39	; 0x27
 8001e72:	f000 fada 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	37c8      	adds	r7, #200	; 0xc8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40005000 	.word	0x40005000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48000800 	.word	0x48000800
 8001e8c:	48000c00 	.word	0x48000c00
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40004400 	.word	0x40004400
 8001e98:	40004800 	.word	0x40004800

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 f964 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ef4:	2004      	movs	r0, #4
 8001ef6:	f000 fcf3 	bl	80028e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001f06:	f002 faa0 	bl	800444a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001f0a:	4803      	ldr	r0, [pc, #12]	; (8001f18 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001f0c:	f002 fa9d 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	2000034c 	.word	0x2000034c
 8001f18:	200001ac 	.word	0x200001ac

08001f1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f22:	f002 fa92 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000034c 	.word	0x2000034c

08001f30 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001f36:	f002 fa88 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000034c 	.word	0x2000034c

08001f44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <TIM1_CC_IRQHandler+0x10>)
 8001f4a:	f002 fa7e 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000034c 	.word	0x2000034c

08001f58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <TIM2_IRQHandler+0x10>)
 8001f5e:	f002 fa74 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000398 	.word	0x20000398

08001f6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <TIM3_IRQHandler+0x10>)
 8001f72:	f002 fa6a 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200001f8 	.word	0x200001f8

08001f80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <TIM4_IRQHandler+0x10>)
 8001f86:	f002 fa60 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200000dc 	.word	0x200000dc

08001f94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <USART1_IRQHandler+0x10>)
 8001f9a:	f003 ff49 	bl	8005e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200002c8 	.word	0x200002c8

08001fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <USART2_IRQHandler+0x10>)
 8001fae:	f003 ff3f 	bl	8005e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200003e4 	.word	0x200003e4

08001fbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <USART3_IRQHandler+0x10>)
 8001fc2:	f003 ff35 	bl	8005e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000128 	.word	0x20000128

08001fd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fd8:	f000 fc82 	bl	80028e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <TIM8_BRK_IRQHandler+0x10>)
 8001fe6:	f002 fa30 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000090 	.word	0x20000090

08001ff4 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <TIM8_UP_IRQHandler+0x10>)
 8001ffa:	f002 fa26 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000090 	.word	0x20000090

08002008 <TIM8_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts.
  */
void TIM8_TRG_COM_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <TIM8_TRG_COM_IRQHandler+0x10>)
 800200e:	f002 fa1c 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000090 	.word	0x20000090

0800201c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM8_CC_IRQHandler+0x10>)
 8002022:	f002 fa12 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000090 	.word	0x20000090

08002030 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <UART5_IRQHandler+0x10>)
 8002036:	f003 fefb 	bl	8005e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000244 	.word	0x20000244

08002044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <SystemInit+0x5c>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <SystemInit+0x5c>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <SystemInit+0x60>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <SystemInit+0x60>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <SystemInit+0x60>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <SystemInit+0x60>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <SystemInit+0x60>)
 8002070:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002074:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002078:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <SystemInit+0x60>)
 800207c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002080:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <SystemInit+0x60>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <SystemInit+0x60>)
 8002088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SystemInit+0x60>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00
 80020a4:	40021000 	.word	0x40021000

080020a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020ac:	f7ff ffca 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020b2:	e003      	b.n	80020bc <LoopCopyDataInit>

080020b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020ba:	3104      	adds	r1, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020bc:	480a      	ldr	r0, [pc, #40]	; (80020e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80020c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020c4:	d3f6      	bcc.n	80020b4 <CopyDataInit>
	ldr	r2, =_sbss
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020c8:	e002      	b.n	80020d0 <LoopFillZerobss>

080020ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020cc:	f842 3b04 	str.w	r3, [r2], #4

080020d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <LoopForever+0x16>)
	cmp	r2, r3
 80020d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020d4:	d3f9      	bcc.n	80020ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d6:	f004 fe87 	bl	8006de8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020da:	f7fe fd05 	bl	8000ae8 <main>

080020de <LoopForever>:

LoopForever:
    b LoopForever
 80020de:	e7fe      	b.n	80020de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020e0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80020e4:	08006eb0 	.word	0x08006eb0
	ldr	r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020ec:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80020f0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80020f4:	2000046c 	.word	0x2000046c

080020f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC1_2_IRQHandler>
	...

080020fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_Init+0x3c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_Init+0x3c>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002112:	2003      	movs	r0, #3
 8002114:	f000 f962 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002118:	2000      	movs	r0, #0
 800211a:	f000 f80f 	bl	800213c <HAL_InitTick>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	e001      	b.n	800212e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800212a:	f7ff fb67 	bl	80017fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800212e:	79fb      	ldrb	r3, [r7, #7]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40022000 	.word	0x40022000

0800213c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <HAL_InitTick+0x6c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d023      	beq.n	8002198 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <HAL_InitTick+0x70>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_InitTick+0x6c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f96d 	bl	8002446 <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10f      	bne.n	8002192 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d809      	bhi.n	800218c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002178:	2200      	movs	r2, #0
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f000 f937 	bl	80023f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_InitTick+0x74>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e007      	b.n	800219c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e004      	b.n	800219c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	e001      	b.n	800219c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000000c 	.word	0x2000000c
 80021ac:	20000004 	.word	0x20000004
 80021b0:	20000008 	.word	0x20000008

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000000c 	.word	0x2000000c
 80021d8:	20000468 	.word	0x20000468

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000468 	.word	0x20000468

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff ffee 	bl	80021dc <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffde 	bl	80021dc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	2000000c 	.word	0x2000000c

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff29 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff3e 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff31 	bl	80022a0 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d008      	beq.n	8002488 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2204      	movs	r2, #4
 800247a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e022      	b.n	80024ce <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 020e 	bic.w	r2, r2, #14
 8002496:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	f003 021c 	and.w	r2, r3, #28
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	2101      	movs	r1, #1
 80024b6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d005      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2204      	movs	r2, #4
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	e029      	b.n	8002552 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 020e 	bic.w	r2, r2, #14
 800250c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f003 021c 	and.w	r2, r3, #28
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
    }
  }
  return status;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256a:	e17f      	b.n	800286c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8171 	beq.w	8002866 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d00b      	beq.n	80025a4 <HAL_GPIO_Init+0x48>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d007      	beq.n	80025a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002598:	2b11      	cmp	r3, #17
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b12      	cmp	r3, #18
 80025a2:	d130      	bne.n	8002606 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025da:	2201      	movs	r2, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f003 0201 	and.w	r2, r3, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b03      	cmp	r3, #3
 8002610:	d118      	bne.n	8002644 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002618:	2201      	movs	r2, #1
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	08db      	lsrs	r3, r3, #3
 800262e:	f003 0201 	and.w	r2, r3, #1
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x128>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b12      	cmp	r3, #18
 8002682:	d123      	bne.n	80026cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	6939      	ldr	r1, [r7, #16]
 80026c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80ac 	beq.w	8002866 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <HAL_GPIO_Init+0x330>)
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	4a5e      	ldr	r2, [pc, #376]	; (800288c <HAL_GPIO_Init+0x330>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6613      	str	r3, [r2, #96]	; 0x60
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <HAL_GPIO_Init+0x330>)
 800271c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002726:	4a5a      	ldr	r2, [pc, #360]	; (8002890 <HAL_GPIO_Init+0x334>)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002750:	d025      	beq.n	800279e <HAL_GPIO_Init+0x242>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x338>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01f      	beq.n	800279a <HAL_GPIO_Init+0x23e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_GPIO_Init+0x33c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_Init+0x23a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_GPIO_Init+0x340>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0x236>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4c      	ldr	r2, [pc, #304]	; (80028a0 <HAL_GPIO_Init+0x344>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00d      	beq.n	800278e <HAL_GPIO_Init+0x232>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4b      	ldr	r2, [pc, #300]	; (80028a4 <HAL_GPIO_Init+0x348>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <HAL_GPIO_Init+0x22e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4a      	ldr	r2, [pc, #296]	; (80028a8 <HAL_GPIO_Init+0x34c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_GPIO_Init+0x22a>
 8002782:	2306      	movs	r3, #6
 8002784:	e00c      	b.n	80027a0 <HAL_GPIO_Init+0x244>
 8002786:	2307      	movs	r3, #7
 8002788:	e00a      	b.n	80027a0 <HAL_GPIO_Init+0x244>
 800278a:	2305      	movs	r3, #5
 800278c:	e008      	b.n	80027a0 <HAL_GPIO_Init+0x244>
 800278e:	2304      	movs	r3, #4
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x244>
 8002792:	2303      	movs	r3, #3
 8002794:	e004      	b.n	80027a0 <HAL_GPIO_Init+0x244>
 8002796:	2302      	movs	r3, #2
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_Init+0x244>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_GPIO_Init+0x244>
 800279e:	2300      	movs	r3, #0
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	f002 0203 	and.w	r2, r2, #3
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	4093      	lsls	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027b0:	4937      	ldr	r1, [pc, #220]	; (8002890 <HAL_GPIO_Init+0x334>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_GPIO_Init+0x350>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027e2:	4a32      	ldr	r2, [pc, #200]	; (80028ac <HAL_GPIO_Init+0x350>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_GPIO_Init+0x350>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800280c:	4a27      	ldr	r2, [pc, #156]	; (80028ac <HAL_GPIO_Init+0x350>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_GPIO_Init+0x350>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <HAL_GPIO_Init+0x350>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_GPIO_Init+0x350>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002860:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_GPIO_Init+0x350>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3301      	adds	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	f47f ae78 	bne.w	800256c <HAL_GPIO_Init+0x10>
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	40010000 	.word	0x40010000
 8002894:	48000400 	.word	0x48000400
 8002898:	48000800 	.word	0x48000800
 800289c:	48000c00 	.word	0x48000c00
 80028a0:	48001000 	.word	0x48001000
 80028a4:	48001400 	.word	0x48001400
 80028a8:	48001800 	.word	0x48001800
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe ff50 	bl	80017a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40010400 	.word	0x40010400

08002910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <HAL_PWREx_GetVoltageRange+0x18>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40007000 	.word	0x40007000

0800292c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293a:	d130      	bne.n	800299e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002948:	d038      	beq.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2232      	movs	r2, #50	; 0x32
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0c9b      	lsrs	r3, r3, #18
 800296c:	3301      	adds	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002970:	e002      	b.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d102      	bne.n	800298c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f2      	bne.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002998:	d110      	bne.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e00f      	b.n	80029be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029aa:	d007      	beq.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b4:	4a05      	ldr	r2, [pc, #20]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40007000 	.word	0x40007000
 80029d0:	20000004 	.word	0x20000004
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e3d4      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ea:	4ba1      	ldr	r3, [pc, #644]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f4:	4b9e      	ldr	r3, [pc, #632]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80e4 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4a>
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	f040 808b 	bne.w	8002b30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f040 8087 	bne.w	8002b30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a22:	4b93      	ldr	r3, [pc, #588]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x62>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e3ac      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	4b8c      	ldr	r3, [pc, #560]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_RCC_OscConfig+0x7c>
 8002a4a:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a52:	e005      	b.n	8002a60 <HAL_RCC_OscConfig+0x88>
 8002a54:	4b86      	ldr	r3, [pc, #536]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d223      	bcs.n	8002aac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fd41 	bl	80034f0 <RCC_SetFlashLatencyFromMSIRange>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e38d      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a78:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	f043 0308 	orr.w	r3, r3, #8
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b7a      	ldr	r3, [pc, #488]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4977      	ldr	r1, [pc, #476]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a96:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4972      	ldr	r1, [pc, #456]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
 8002aaa:	e025      	b.n	8002af8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aac:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6f      	ldr	r2, [pc, #444]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	496a      	ldr	r1, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aca:	4b69      	ldr	r3, [pc, #420]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	4965      	ldr	r1, [pc, #404]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fd01 	bl	80034f0 <RCC_SetFlashLatencyFromMSIRange>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e34d      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af8:	f000 fc36 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	495a      	ldr	r1, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x29c>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
 8002b14:	4a58      	ldr	r2, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x2a0>)
 8002b16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b18:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <HAL_RCC_OscConfig+0x2a4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fb0d 	bl	800213c <HAL_InitTick>
 8002b22:	4603      	mov	r3, r0
 8002b24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d052      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	e331      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d032      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b38:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a4c      	ldr	r2, [pc, #304]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b44:	f7ff fb4a 	bl	80021dc <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4c:	f7ff fb46 	bl	80021dc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e31a      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5e:	4b44      	ldr	r3, [pc, #272]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a40      	ldr	r2, [pc, #256]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	493b      	ldr	r1, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	4936      	ldr	r1, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
 8002b9c:	e01a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a33      	ldr	r2, [pc, #204]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002baa:	f7ff fb17 	bl	80021dc <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb2:	f7ff fb13 	bl	80021dc <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e2e7      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x1da>
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d074      	beq.n	8002cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x21a>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	d10e      	bne.n	8002c0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d064      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d160      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e2c4      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x24a>
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e01d      	b.n	8002c5e <HAL_RCC_OscConfig+0x286>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x26e>
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0x286>
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7ff fab9 	bl	80021dc <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6c:	e011      	b.n	8002c92 <HAL_RCC_OscConfig+0x2ba>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08006e58 	.word	0x08006e58
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7ff faac 	bl	80021dc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e280      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	4baf      	ldr	r3, [pc, #700]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x2a8>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7ff fa9c 	bl	80021dc <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7ff fa98 	bl	80021dc <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e26c      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cba:	4ba5      	ldr	r3, [pc, #660]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2d0>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d060      	beq.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x310>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d119      	bne.n	8002d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d116      	bne.n	8002d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce8:	4b99      	ldr	r3, [pc, #612]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x328>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e249      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b93      	ldr	r3, [pc, #588]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	4990      	ldr	r1, [pc, #576]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d14:	e040      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d023      	beq.n	8002d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1e:	4b8c      	ldr	r3, [pc, #560]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a8b      	ldr	r2, [pc, #556]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7ff fa57 	bl	80021dc <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d32:	f7ff fa53 	bl	80021dc <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e227      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	4b82      	ldr	r3, [pc, #520]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b7f      	ldr	r3, [pc, #508]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	497c      	ldr	r1, [pc, #496]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e018      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d66:	4b7a      	ldr	r3, [pc, #488]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a79      	ldr	r2, [pc, #484]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7ff fa33 	bl	80021dc <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7ff fa2f 	bl	80021dc <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e203      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d8c:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03c      	beq.n	8002e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db2:	4a67      	ldr	r2, [pc, #412]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7ff fa0e 	bl	80021dc <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7ff fa0a 	bl	80021dc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1de      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd6:	4b5e      	ldr	r3, [pc, #376]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ef      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x3ec>
 8002de4:	e01b      	b.n	8002e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b5a      	ldr	r3, [pc, #360]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7ff f9f1 	bl	80021dc <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7ff f9ed 	bl	80021dc <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1c1      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e10:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ef      	bne.n	8002dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80a6 	beq.w	8002f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e30:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	4a43      	ldr	r2, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6593      	str	r3, [r2, #88]	; 0x58
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e54:	2301      	movs	r3, #1
 8002e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	4b3e      	ldr	r3, [pc, #248]	; (8002f54 <HAL_RCC_OscConfig+0x57c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d118      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e64:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_OscConfig+0x57c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <HAL_RCC_OscConfig+0x57c>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e70:	f7ff f9b4 	bl	80021dc <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e78:	f7ff f9b0 	bl	80021dc <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e184      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8a:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <HAL_RCC_OscConfig+0x57c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4d8>
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eae:	e024      	b.n	8002efa <HAL_RCC_OscConfig+0x522>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d110      	bne.n	8002eda <HAL_RCC_OscConfig+0x502>
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	4a24      	ldr	r2, [pc, #144]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed8:	e00f      	b.n	8002efa <HAL_RCC_OscConfig+0x522>
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eea:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ef2:	f023 0304 	bic.w	r3, r3, #4
 8002ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7ff f96b 	bl	80021dc <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7ff f967 	bl	80021dc <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e139      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ed      	beq.n	8002f0a <HAL_RCC_OscConfig+0x532>
 8002f2e:	e01a      	b.n	8002f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7ff f954 	bl	80021dc <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f36:	e00f      	b.n	8002f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7ff f950 	bl	80021dc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d906      	bls.n	8002f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e122      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f58:	4b90      	ldr	r3, [pc, #576]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e8      	bne.n	8002f38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b8b      	ldr	r3, [pc, #556]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	4a8a      	ldr	r2, [pc, #552]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8108 	beq.w	8003192 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	f040 80d0 	bne.w	800312c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f8c:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0203 	and.w	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d130      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	3b01      	subs	r3, #1
 8002fac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d127      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d11f      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fcc:	2a07      	cmp	r2, #7
 8002fce:	bf14      	ite	ne
 8002fd0:	2201      	movne	r2, #1
 8002fd2:	2200      	moveq	r2, #0
 8002fd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d113      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d06e      	beq.n	80030e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b0c      	cmp	r3, #12
 8003006:	d069      	beq.n	80030dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003008:	4b64      	ldr	r3, [pc, #400]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003014:	4b61      	ldr	r3, [pc, #388]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b7      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003024:	4b5d      	ldr	r3, [pc, #372]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a5c      	ldr	r2, [pc, #368]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800302a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003030:	f7ff f8d4 	bl	80021dc <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7ff f8d0 	bl	80021dc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0a4      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304a:	4b54      	ldr	r3, [pc, #336]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003056:	4b51      	ldr	r3, [pc, #324]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <HAL_RCC_OscConfig+0x7c8>)
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003066:	3a01      	subs	r2, #1
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	4311      	orrs	r1, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003070:	0212      	lsls	r2, r2, #8
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003078:	0852      	lsrs	r2, r2, #1
 800307a:	3a01      	subs	r2, #1
 800307c:	0552      	lsls	r2, r2, #21
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003084:	0852      	lsrs	r2, r2, #1
 8003086:	3a01      	subs	r2, #1
 8003088:	0652      	lsls	r2, r2, #25
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003090:	0912      	lsrs	r2, r2, #4
 8003092:	0452      	lsls	r2, r2, #17
 8003094:	430a      	orrs	r2, r1
 8003096:	4941      	ldr	r1, [pc, #260]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800309c:	4b3f      	ldr	r3, [pc, #252]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3e      	ldr	r2, [pc, #248]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a8:	4b3c      	ldr	r3, [pc, #240]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a3b      	ldr	r2, [pc, #236]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b4:	f7ff f892 	bl	80021dc <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7ff f88e 	bl	80021dc <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e062      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030da:	e05a      	b.n	8003192 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e059      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d152      	bne.n	8003192 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030ec:	4b2b      	ldr	r3, [pc, #172]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003102:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003104:	f7ff f86a 	bl	80021dc <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7ff f866 	bl	80021dc <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e03a      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x734>
 800312a:	e032      	b.n	8003192 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d02d      	beq.n	800318e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a19      	ldr	r2, [pc, #100]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003150:	f023 0303 	bic.w	r3, r3, #3
 8003154:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4a10      	ldr	r2, [pc, #64]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800315c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003164:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7ff f839 	bl	80021dc <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7ff f835 	bl	80021dc <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e009      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_OscConfig+0x796>
 800318c:	e001      	b.n	8003192 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	f99d808c 	.word	0xf99d808c

080031a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0c8      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4961      	ldr	r1, [pc, #388]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b5f      	ldr	r3, [pc, #380]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b0      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d04c      	beq.n	800328e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d107      	bne.n	800320c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d121      	bne.n	800324c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e09e      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d115      	bne.n	800324c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e092      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e086      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323c:	4b46      	ldr	r3, [pc, #280]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e07e      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800324c:	4b42      	ldr	r3, [pc, #264]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	493f      	ldr	r1, [pc, #252]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325e:	f7fe ffbd 	bl	80021dc <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003264:	e00a      	b.n	800327c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003266:	f7fe ffb9 	bl	80021dc <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e066      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 020c 	and.w	r2, r3, #12
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	429a      	cmp	r2, r3
 800328c:	d1eb      	bne.n	8003266 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329a:	4b2f      	ldr	r3, [pc, #188]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	492c      	ldr	r1, [pc, #176]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d210      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 0207 	bic.w	r2, r3, #7
 80032c2:	4924      	ldr	r1, [pc, #144]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e036      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4918      	ldr	r1, [pc, #96]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4910      	ldr	r1, [pc, #64]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800331a:	f000 f825 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490c      	ldr	r1, [pc, #48]	; (800335c <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fefc 	bl	800213c <HAL_InitTick>
 8003344:	4603      	mov	r3, r0
 8003346:	72fb      	strb	r3, [r7, #11]

  return status;
 8003348:	7afb      	ldrb	r3, [r7, #11]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40022000 	.word	0x40022000
 8003358:	40021000 	.word	0x40021000
 800335c:	08006e58 	.word	0x08006e58
 8003360:	20000004 	.word	0x20000004
 8003364:	20000008 	.word	0x20000008

08003368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x34>
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d121      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d11e      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800339c:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033a8:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033c4:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10d      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_GetSysClockFreq+0x110>)
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e004      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_RCC_GetSysClockFreq+0x114>)
 80033ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d134      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0xa6>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d003      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0xac>
 800340c:	e005      	b.n	800341a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_GetSysClockFreq+0x110>)
 8003410:	617b      	str	r3, [r7, #20]
      break;
 8003412:	e005      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_GetSysClockFreq+0x114>)
 8003416:	617b      	str	r3, [r7, #20]
      break;
 8003418:	e002      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	617b      	str	r3, [r7, #20]
      break;
 800341e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	3301      	adds	r3, #1
 800342c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	fb02 f203 	mul.w	r2, r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	0e5b      	lsrs	r3, r3, #25
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	3301      	adds	r3, #1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003460:	69bb      	ldr	r3, [r7, #24]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	08006e70 	.word	0x08006e70
 8003478:	00f42400 	.word	0x00f42400
 800347c:	007a1200 	.word	0x007a1200

08003480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_GetHCLKFreq+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000004 	.word	0x20000004

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800349c:	f7ff fff0 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08006e68 	.word	0x08006e68

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034c8:	f7ff ffda 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0adb      	lsrs	r3, r3, #11
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4904      	ldr	r1, [pc, #16]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	08006e68 	.word	0x08006e68

080034f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003508:	f7ff fa02 	bl	8002910 <HAL_PWREx_GetVoltageRange>
 800350c:	6178      	str	r0, [r7, #20]
 800350e:	e014      	b.n	800353a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	4a24      	ldr	r2, [pc, #144]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351a:	6593      	str	r3, [r2, #88]	; 0x58
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003528:	f7ff f9f2 	bl	8002910 <HAL_PWREx_GetVoltageRange>
 800352c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800352e:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003538:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003540:	d10b      	bne.n	800355a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d919      	bls.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2ba0      	cmp	r3, #160	; 0xa0
 800354c:	d902      	bls.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800354e:	2302      	movs	r3, #2
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	e013      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003554:	2301      	movs	r3, #1
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	e010      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d902      	bls.n	8003566 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003560:	2303      	movs	r3, #3
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e00a      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d102      	bne.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800356c:	2302      	movs	r3, #2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e004      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b70      	cmp	r3, #112	; 0x70
 8003576:	d101      	bne.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003578:	2301      	movs	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 0207 	bic.w	r2, r3, #7
 8003584:	4909      	ldr	r1, [pc, #36]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40022000 	.word	0x40022000

080035b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035b8:	2300      	movs	r3, #0
 80035ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035bc:	2300      	movs	r3, #0
 80035be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d041      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035d4:	d02a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035da:	d824      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e0:	d008      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e6:	d81e      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f0:	d010      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035f2:	e018      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035f4:	4b86      	ldr	r3, [pc, #536]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a85      	ldr	r2, [pc, #532]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003600:	e015      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fabb 	bl	8003b84 <RCCEx_PLLSAI1_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003612:	e00c      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3320      	adds	r3, #32
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fba6 	bl	8003d6c <RCCEx_PLLSAI2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003624:	e003      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	74fb      	strb	r3, [r7, #19]
      break;
 800362a:	e000      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800362c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003634:	4b76      	ldr	r3, [pc, #472]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003642:	4973      	ldr	r1, [pc, #460]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800364a:	e001      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d041      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003660:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003664:	d02a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800366a:	d824      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800366c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003676:	d81e      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003680:	d010      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003682:	e018      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003684:	4b62      	ldr	r3, [pc, #392]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a61      	ldr	r2, [pc, #388]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003690:	e015      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fa73 	bl	8003b84 <RCCEx_PLLSAI1_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036a2:	e00c      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3320      	adds	r3, #32
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fb5e 	bl	8003d6c <RCCEx_PLLSAI2_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036b4:	e003      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036c4:	4b52      	ldr	r3, [pc, #328]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d2:	494f      	ldr	r1, [pc, #316]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036da:	e001      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a0 	beq.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003702:	2300      	movs	r3, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	4b41      	ldr	r3, [pc, #260]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	4a40      	ldr	r2, [pc, #256]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	; 0x58
 8003714:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003720:	2301      	movs	r3, #1
 8003722:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003724:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003730:	f7fe fd54 	bl	80021dc <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003736:	e009      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7fe fd50 	bl	80021dc <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	74fb      	strb	r3, [r7, #19]
        break;
 800374a:	e005      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800374c:	4b31      	ldr	r3, [pc, #196]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d15c      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800375e:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003768:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01f      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	429a      	cmp	r2, r3
 800377a:	d019      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	4a20      	ldr	r2, [pc, #128]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003798:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037a8:	4a19      	ldr	r2, [pc, #100]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d016      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fe fd0f 	bl	80021dc <HAL_GetTick>
 80037be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c0:	e00b      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fe fd0b 	bl	80021dc <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d902      	bls.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	74fb      	strb	r3, [r7, #19]
            break;
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ec      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fe:	4904      	ldr	r1, [pc, #16]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003806:	e009      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000
 8003814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800381c:	7c7b      	ldrb	r3, [r7, #17]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d105      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003822:	4b9e      	ldr	r3, [pc, #632]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	4a9d      	ldr	r2, [pc, #628]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383a:	4b98      	ldr	r3, [pc, #608]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f023 0203 	bic.w	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	4994      	ldr	r1, [pc, #592]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800385c:	4b8f      	ldr	r3, [pc, #572]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f023 020c 	bic.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386a:	498c      	ldr	r1, [pc, #560]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800387e:	4b87      	ldr	r3, [pc, #540]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	4983      	ldr	r1, [pc, #524]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a0:	4b7e      	ldr	r3, [pc, #504]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	497b      	ldr	r1, [pc, #492]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038c2:	4b76      	ldr	r3, [pc, #472]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d0:	4972      	ldr	r1, [pc, #456]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038e4:	4b6d      	ldr	r3, [pc, #436]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	496a      	ldr	r1, [pc, #424]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003906:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	4961      	ldr	r1, [pc, #388]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003928:	4b5c      	ldr	r3, [pc, #368]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	4959      	ldr	r1, [pc, #356]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800394a:	4b54      	ldr	r3, [pc, #336]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003958:	4950      	ldr	r1, [pc, #320]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800396c:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397a:	4948      	ldr	r1, [pc, #288]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800398e:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	493f      	ldr	r1, [pc, #252]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d028      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b0:	4b3a      	ldr	r3, [pc, #232]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039be:	4937      	ldr	r1, [pc, #220]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ce:	d106      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d0:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a31      	ldr	r2, [pc, #196]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039da:	60d3      	str	r3, [r2, #12]
 80039dc:	e011      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e6:	d10c      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	2101      	movs	r1, #1
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f8c8 	bl	8003b84 <RCCEx_PLLSAI1_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d028      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a0e:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	491f      	ldr	r1, [pc, #124]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2c:	d106      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4a1a      	ldr	r2, [pc, #104]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a38:	60d3      	str	r3, [r2, #12]
 8003a3a:	e011      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 f899 	bl	8003b84 <RCCEx_PLLSAI1_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02b      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7a:	4908      	ldr	r1, [pc, #32]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a8a:	d109      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a02      	ldr	r2, [pc, #8]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a96:	60d3      	str	r3, [r2, #12]
 8003a98:	e014      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f867 	bl	8003b84 <RCCEx_PLLSAI1_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02f      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad0:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ade:	4928      	ldr	r1, [pc, #160]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aee:	d10d      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	2102      	movs	r1, #2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f844 	bl	8003b84 <RCCEx_PLLSAI1_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d014      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b06:	7cfb      	ldrb	r3, [r7, #19]
 8003b08:	74bb      	strb	r3, [r7, #18]
 8003b0a:	e011      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3320      	adds	r3, #32
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f925 	bl	8003d6c <RCCEx_PLLSAI2_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b4a:	490d      	ldr	r1, [pc, #52]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b6e:	4904      	ldr	r1, [pc, #16]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b76:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000

08003b84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b92:	4b75      	ldr	r3, [pc, #468]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d018      	beq.n	8003bd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b9e:	4b72      	ldr	r3, [pc, #456]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0203 	and.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d10d      	bne.n	8003bca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bb6:	4b6c      	ldr	r3, [pc, #432]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d047      	beq.n	8003c5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	e044      	b.n	8003c5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d018      	beq.n	8003c0a <RCCEx_PLLSAI1_Config+0x86>
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d825      	bhi.n	8003c28 <RCCEx_PLLSAI1_Config+0xa4>
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d002      	beq.n	8003be6 <RCCEx_PLLSAI1_Config+0x62>
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d009      	beq.n	8003bf8 <RCCEx_PLLSAI1_Config+0x74>
 8003be4:	e020      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003be6:	4b60      	ldr	r3, [pc, #384]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d11d      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf6:	e01a      	b.n	8003c2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bf8:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d116      	bne.n	8003c32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c08:	e013      	b.n	8003c32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c0a:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c16:	4b54      	ldr	r3, [pc, #336]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c26:	e006      	b.n	8003c36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c2c:	e004      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e002      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c32:	bf00      	nop
 8003c34:	e000      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	430b      	orrs	r3, r1
 8003c54:	4944      	ldr	r1, [pc, #272]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d17d      	bne.n	8003d5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c60:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fe fab6 	bl	80021dc <HAL_GetTick>
 8003c70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c72:	e009      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c74:	f7fe fab2 	bl	80021dc <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d902      	bls.n	8003c88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	73fb      	strb	r3, [r7, #15]
        break;
 8003c86:	e005      	b.n	8003c94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c88:	4b37      	ldr	r3, [pc, #220]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ef      	bne.n	8003c74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d160      	bne.n	8003d5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d111      	bne.n	8003cc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ca0:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	0211      	lsls	r1, r2, #8
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68d2      	ldr	r2, [r2, #12]
 8003cb6:	0912      	lsrs	r2, r2, #4
 8003cb8:	0452      	lsls	r2, r2, #17
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	492a      	ldr	r1, [pc, #168]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	610b      	str	r3, [r1, #16]
 8003cc2:	e027      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d112      	bne.n	8003cf0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cca:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6892      	ldr	r2, [r2, #8]
 8003cda:	0211      	lsls	r1, r2, #8
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6912      	ldr	r2, [r2, #16]
 8003ce0:	0852      	lsrs	r2, r2, #1
 8003ce2:	3a01      	subs	r2, #1
 8003ce4:	0552      	lsls	r2, r2, #21
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	491f      	ldr	r1, [pc, #124]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	610b      	str	r3, [r1, #16]
 8003cee:	e011      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6892      	ldr	r2, [r2, #8]
 8003d00:	0211      	lsls	r1, r2, #8
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6952      	ldr	r2, [r2, #20]
 8003d06:	0852      	lsrs	r2, r2, #1
 8003d08:	3a01      	subs	r2, #1
 8003d0a:	0652      	lsls	r2, r2, #25
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	4916      	ldr	r1, [pc, #88]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a13      	ldr	r2, [pc, #76]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fe fa5c 	bl	80021dc <HAL_GetTick>
 8003d24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d26:	e009      	b.n	8003d3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d28:	f7fe fa58 	bl	80021dc <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d902      	bls.n	8003d3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	73fb      	strb	r3, [r7, #15]
          break;
 8003d3a:	e005      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ef      	beq.n	8003d28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	4904      	ldr	r1, [pc, #16]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000

08003d6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d7a:	4b6a      	ldr	r3, [pc, #424]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d018      	beq.n	8003db8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d86:	4b67      	ldr	r3, [pc, #412]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0203 	and.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d10d      	bne.n	8003db2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
       ||
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d9e:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
       ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d047      	beq.n	8003e42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	e044      	b.n	8003e42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d018      	beq.n	8003df2 <RCCEx_PLLSAI2_Config+0x86>
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d825      	bhi.n	8003e10 <RCCEx_PLLSAI2_Config+0xa4>
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d002      	beq.n	8003dce <RCCEx_PLLSAI2_Config+0x62>
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d009      	beq.n	8003de0 <RCCEx_PLLSAI2_Config+0x74>
 8003dcc:	e020      	b.n	8003e10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dce:	4b55      	ldr	r3, [pc, #340]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d11d      	bne.n	8003e16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dde:	e01a      	b.n	8003e16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003de0:	4b50      	ldr	r3, [pc, #320]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d116      	bne.n	8003e1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df0:	e013      	b.n	8003e1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003df2:	4b4c      	ldr	r3, [pc, #304]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dfe:	4b49      	ldr	r3, [pc, #292]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e0e:	e006      	b.n	8003e1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      break;
 8003e14:	e004      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10d      	bne.n	8003e42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e26:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	4939      	ldr	r1, [pc, #228]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d167      	bne.n	8003f18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e48:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a35      	ldr	r2, [pc, #212]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e54:	f7fe f9c2 	bl	80021dc <HAL_GetTick>
 8003e58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e5a:	e009      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e5c:	f7fe f9be 	bl	80021dc <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d902      	bls.n	8003e70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e6e:	e005      	b.n	8003e7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e70:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ef      	bne.n	8003e5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d14a      	bne.n	8003f18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d111      	bne.n	8003eac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e88:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6892      	ldr	r2, [r2, #8]
 8003e98:	0211      	lsls	r1, r2, #8
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	0912      	lsrs	r2, r2, #4
 8003ea0:	0452      	lsls	r2, r2, #17
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	491f      	ldr	r1, [pc, #124]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	614b      	str	r3, [r1, #20]
 8003eaa:	e011      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eac:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6892      	ldr	r2, [r2, #8]
 8003ebc:	0211      	lsls	r1, r2, #8
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6912      	ldr	r2, [r2, #16]
 8003ec2:	0852      	lsrs	r2, r2, #1
 8003ec4:	3a01      	subs	r2, #1
 8003ec6:	0652      	lsls	r2, r2, #25
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	4916      	ldr	r1, [pc, #88]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fe f97e 	bl	80021dc <HAL_GetTick>
 8003ee0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ee2:	e009      	b.n	8003ef8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ee4:	f7fe f97a 	bl	80021dc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d902      	bls.n	8003ef8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ef6:	e005      	b.n	8003f04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ef      	beq.n	8003ee4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4904      	ldr	r1, [pc, #16]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000

08003f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e049      	b.n	8003fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd fc78 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 fe62 	bl	8004c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d001      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e04f      	b.n	8004090 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a23      	ldr	r2, [pc, #140]	; (800409c <HAL_TIM_Base_Start_IT+0xc4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01d      	beq.n	800404e <HAL_TIM_Base_Start_IT+0x76>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401a:	d018      	beq.n	800404e <HAL_TIM_Base_Start_IT+0x76>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_TIM_Base_Start_IT+0x76>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00e      	beq.n	800404e <HAL_TIM_Base_Start_IT+0x76>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_TIM_Base_Start_IT+0x76>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_TIM_Base_Start_IT+0x76>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d115      	bne.n	800407a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004056:	4013      	ands	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b06      	cmp	r3, #6
 800405e:	d015      	beq.n	800408c <HAL_TIM_Base_Start_IT+0xb4>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004066:	d011      	beq.n	800408c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004078:	e008      	b.n	800408c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e000      	b.n	800408e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00
 80040ac:	40013400 	.word	0x40013400
 80040b0:	40014000 	.word	0x40014000
 80040b4:	00010007 	.word	0x00010007

080040b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e049      	b.n	800415e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f841 	bl	8004166 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f000 fd9a 	bl	8004c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_PWM_Start+0x24>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e03c      	b.n	800421a <HAL_TIM_PWM_Start+0x9e>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d109      	bne.n	80041ba <HAL_TIM_PWM_Start+0x3e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e02f      	b.n	800421a <HAL_TIM_PWM_Start+0x9e>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d109      	bne.n	80041d4 <HAL_TIM_PWM_Start+0x58>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e022      	b.n	800421a <HAL_TIM_PWM_Start+0x9e>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d109      	bne.n	80041ee <HAL_TIM_PWM_Start+0x72>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	e015      	b.n	800421a <HAL_TIM_PWM_Start+0x9e>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d109      	bne.n	8004208 <HAL_TIM_PWM_Start+0x8c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e008      	b.n	800421a <HAL_TIM_PWM_Start+0x9e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e09c      	b.n	800435c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d104      	bne.n	8004232 <HAL_TIM_PWM_Start+0xb6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004230:	e023      	b.n	800427a <HAL_TIM_PWM_Start+0xfe>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d104      	bne.n	8004242 <HAL_TIM_PWM_Start+0xc6>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004240:	e01b      	b.n	800427a <HAL_TIM_PWM_Start+0xfe>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b08      	cmp	r3, #8
 8004246:	d104      	bne.n	8004252 <HAL_TIM_PWM_Start+0xd6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004250:	e013      	b.n	800427a <HAL_TIM_PWM_Start+0xfe>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b0c      	cmp	r3, #12
 8004256:	d104      	bne.n	8004262 <HAL_TIM_PWM_Start+0xe6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004260:	e00b      	b.n	800427a <HAL_TIM_PWM_Start+0xfe>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b10      	cmp	r3, #16
 8004266:	d104      	bne.n	8004272 <HAL_TIM_PWM_Start+0xf6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004270:	e003      	b.n	800427a <HAL_TIM_PWM_Start+0xfe>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2201      	movs	r2, #1
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f001 fa92 	bl	80057ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a35      	ldr	r2, [pc, #212]	; (8004364 <HAL_TIM_PWM_Start+0x1e8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_TIM_PWM_Start+0x13e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a34      	ldr	r2, [pc, #208]	; (8004368 <HAL_TIM_PWM_Start+0x1ec>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_TIM_PWM_Start+0x13e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a32      	ldr	r2, [pc, #200]	; (800436c <HAL_TIM_PWM_Start+0x1f0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_TIM_PWM_Start+0x13e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a31      	ldr	r2, [pc, #196]	; (8004370 <HAL_TIM_PWM_Start+0x1f4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_TIM_PWM_Start+0x13e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2f      	ldr	r2, [pc, #188]	; (8004374 <HAL_TIM_PWM_Start+0x1f8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <HAL_TIM_PWM_Start+0x142>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_TIM_PWM_Start+0x144>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a22      	ldr	r2, [pc, #136]	; (8004364 <HAL_TIM_PWM_Start+0x1e8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01d      	beq.n	800431a <HAL_TIM_PWM_Start+0x19e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e6:	d018      	beq.n	800431a <HAL_TIM_PWM_Start+0x19e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a22      	ldr	r2, [pc, #136]	; (8004378 <HAL_TIM_PWM_Start+0x1fc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_TIM_PWM_Start+0x19e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a21      	ldr	r2, [pc, #132]	; (800437c <HAL_TIM_PWM_Start+0x200>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_TIM_PWM_Start+0x19e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <HAL_TIM_PWM_Start+0x204>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_TIM_PWM_Start+0x19e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a17      	ldr	r2, [pc, #92]	; (8004368 <HAL_TIM_PWM_Start+0x1ec>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIM_PWM_Start+0x19e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a15      	ldr	r2, [pc, #84]	; (800436c <HAL_TIM_PWM_Start+0x1f0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d115      	bne.n	8004346 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	4b18      	ldr	r3, [pc, #96]	; (8004384 <HAL_TIM_PWM_Start+0x208>)
 8004322:	4013      	ands	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b06      	cmp	r3, #6
 800432a:	d015      	beq.n	8004358 <HAL_TIM_PWM_Start+0x1dc>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004332:	d011      	beq.n	8004358 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004344:	e008      	b.n	8004358 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e000      	b.n	800435a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004358:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40013400 	.word	0x40013400
 800436c:	40014000 	.word	0x40014000
 8004370:	40014400 	.word	0x40014400
 8004374:	40014800 	.word	0x40014800
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800
 8004380:	40000c00 	.word	0x40000c00
 8004384:	00010007 	.word	0x00010007

08004388 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e049      	b.n	800442e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f841 	bl	8004436 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 fc32 	bl	8004c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	d122      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d11b      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f06f 0202 	mvn.w	r2, #2
 8004476:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fbb1 	bl	8004bf4 <HAL_TIM_IC_CaptureCallback>
 8004492:	e005      	b.n	80044a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fba3 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fbb4 	bl	8004c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d122      	bne.n	80044fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d11b      	bne.n	80044fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f06f 0204 	mvn.w	r2, #4
 80044ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fb87 	bl	8004bf4 <HAL_TIM_IC_CaptureCallback>
 80044e6:	e005      	b.n	80044f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fb79 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fb8a 	bl	8004c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d122      	bne.n	800454e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b08      	cmp	r3, #8
 8004514:	d11b      	bne.n	800454e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0208 	mvn.w	r2, #8
 800451e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2204      	movs	r2, #4
 8004524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fb5d 	bl	8004bf4 <HAL_TIM_IC_CaptureCallback>
 800453a:	e005      	b.n	8004548 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fb4f 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fb60 	bl	8004c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d122      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	d11b      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f06f 0210 	mvn.w	r2, #16
 8004572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2208      	movs	r2, #8
 8004578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fb33 	bl	8004bf4 <HAL_TIM_IC_CaptureCallback>
 800458e:	e005      	b.n	800459c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fb25 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fb36 	bl	8004c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10e      	bne.n	80045ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d107      	bne.n	80045ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f06f 0201 	mvn.w	r2, #1
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fd f907 	bl	80017dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b80      	cmp	r3, #128	; 0x80
 80045da:	d10e      	bne.n	80045fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d107      	bne.n	80045fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f001 fa0f 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004608:	d10e      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d107      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f001 fa02 	bl	8005a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	d10e      	bne.n	8004654 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d107      	bne.n	8004654 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800464c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fae4 	bl	8004c1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b20      	cmp	r3, #32
 8004660:	d10e      	bne.n	8004680 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b20      	cmp	r3, #32
 800466e:	d107      	bne.n	8004680 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0220 	mvn.w	r2, #32
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 f9c2 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_IC_ConfigChannel+0x1a>
 800469e:	2302      	movs	r3, #2
 80046a0:	e082      	b.n	80047a8 <HAL_TIM_IC_ConfigChannel+0x120>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11b      	bne.n	80046e8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6819      	ldr	r1, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f000 feb6 	bl	8005430 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 020c 	bic.w	r2, r2, #12
 80046d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6999      	ldr	r1, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	619a      	str	r2, [r3, #24]
 80046e6:	e05a      	b.n	800479e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d11c      	bne.n	8004728 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6819      	ldr	r1, [r3, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f000 ff34 	bl	800556a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004710:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6999      	ldr	r1, [r3, #24]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	021a      	lsls	r2, r3, #8
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	619a      	str	r2, [r3, #24]
 8004726:	e03a      	b.n	800479e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b08      	cmp	r3, #8
 800472c:	d11b      	bne.n	8004766 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f000 ff81 	bl	8005644 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 020c 	bic.w	r2, r2, #12
 8004750:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69d9      	ldr	r1, [r3, #28]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	61da      	str	r2, [r3, #28]
 8004764:	e01b      	b.n	800479e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f000 ffa1 	bl	80056bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004788:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	021a      	lsls	r2, r3, #8
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0fd      	b.n	80049c6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b14      	cmp	r3, #20
 80047d6:	f200 80f0 	bhi.w	80049ba <HAL_TIM_PWM_ConfigChannel+0x20a>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004835 	.word	0x08004835
 80047e4:	080049bb 	.word	0x080049bb
 80047e8:	080049bb 	.word	0x080049bb
 80047ec:	080049bb 	.word	0x080049bb
 80047f0:	08004875 	.word	0x08004875
 80047f4:	080049bb 	.word	0x080049bb
 80047f8:	080049bb 	.word	0x080049bb
 80047fc:	080049bb 	.word	0x080049bb
 8004800:	080048b7 	.word	0x080048b7
 8004804:	080049bb 	.word	0x080049bb
 8004808:	080049bb 	.word	0x080049bb
 800480c:	080049bb 	.word	0x080049bb
 8004810:	080048f7 	.word	0x080048f7
 8004814:	080049bb 	.word	0x080049bb
 8004818:	080049bb 	.word	0x080049bb
 800481c:	080049bb 	.word	0x080049bb
 8004820:	08004939 	.word	0x08004939
 8004824:	080049bb 	.word	0x080049bb
 8004828:	080049bb 	.word	0x080049bb
 800482c:	080049bb 	.word	0x080049bb
 8004830:	08004979 	.word	0x08004979
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fa92 	bl	8004d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0208 	orr.w	r2, r2, #8
 800484e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0204 	bic.w	r2, r2, #4
 800485e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6999      	ldr	r1, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	619a      	str	r2, [r3, #24]
      break;
 8004872:	e0a3      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fb02 	bl	8004e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	619a      	str	r2, [r3, #24]
      break;
 80048b4:	e082      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fb6b 	bl	8004f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0208 	orr.w	r2, r2, #8
 80048d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0204 	bic.w	r2, r2, #4
 80048e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69d9      	ldr	r1, [r3, #28]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	61da      	str	r2, [r3, #28]
      break;
 80048f4:	e062      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fbd3 	bl	80050a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	021a      	lsls	r2, r3, #8
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	61da      	str	r2, [r3, #28]
      break;
 8004936:	e041      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fc1c 	bl	800517c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0208 	orr.w	r2, r2, #8
 8004952:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0204 	bic.w	r2, r2, #4
 8004962:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004976:	e021      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fc60 	bl	8005244 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004992:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049b8:	e000      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80049ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop

080049d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_TIM_ConfigClockSource+0x18>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e0b5      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x184>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a24:	d03e      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2a:	f200 8087 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	f000 8085 	beq.w	8004b40 <HAL_TIM_ConfigClockSource+0x170>
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d87f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d01a      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0xa6>
 8004a40:	2b70      	cmp	r3, #112	; 0x70
 8004a42:	d87b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d050      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x11a>
 8004a48:	2b60      	cmp	r3, #96	; 0x60
 8004a4a:	d877      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b50      	cmp	r3, #80	; 0x50
 8004a4e:	d03c      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0xfa>
 8004a50:	2b50      	cmp	r3, #80	; 0x50
 8004a52:	d873      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d058      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x13a>
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d86f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a5c:	2b30      	cmp	r3, #48	; 0x30
 8004a5e:	d064      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a60:	2b30      	cmp	r3, #48	; 0x30
 8004a62:	d86b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d060      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d867      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05c      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d05a      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a74:	e062      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f000 fe71 	bl	800576c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	609a      	str	r2, [r3, #8]
      break;
 8004aa2:	e04e      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6899      	ldr	r1, [r3, #8]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f000 fe5a 	bl	800576c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e03b      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fd18 	bl	800550c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2150      	movs	r1, #80	; 0x50
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fe27 	bl	8005736 <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e02b      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 fd74 	bl	80055e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2160      	movs	r1, #96	; 0x60
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fe17 	bl	8005736 <TIM_ITRx_SetConfig>
      break;
 8004b08:	e01b      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f000 fcf8 	bl	800550c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2140      	movs	r1, #64	; 0x40
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fe07 	bl	8005736 <TIM_ITRx_SetConfig>
      break;
 8004b28:	e00b      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f000 fdfe 	bl	8005736 <TIM_ITRx_SetConfig>
        break;
 8004b3a:	e002      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004b3c:	bf00      	nop
 8004b3e:	e000      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004b40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e031      	b.n	8004bd8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004b84:	6839      	ldr	r1, [r7, #0]
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fbc2 	bl	8005310 <TIM_SlaveTimer_SetConfig>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e018      	b.n	8004bd8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bc4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a40      	ldr	r2, [pc, #256]	; (8004d44 <TIM_Base_SetConfig+0x114>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4e:	d00f      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3d      	ldr	r2, [pc, #244]	; (8004d48 <TIM_Base_SetConfig+0x118>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00b      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a3c      	ldr	r2, [pc, #240]	; (8004d4c <TIM_Base_SetConfig+0x11c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3b      	ldr	r2, [pc, #236]	; (8004d50 <TIM_Base_SetConfig+0x120>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a3a      	ldr	r2, [pc, #232]	; (8004d54 <TIM_Base_SetConfig+0x124>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2f      	ldr	r2, [pc, #188]	; (8004d44 <TIM_Base_SetConfig+0x114>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01f      	beq.n	8004cca <TIM_Base_SetConfig+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c90:	d01b      	beq.n	8004cca <TIM_Base_SetConfig+0x9a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2c      	ldr	r2, [pc, #176]	; (8004d48 <TIM_Base_SetConfig+0x118>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d017      	beq.n	8004cca <TIM_Base_SetConfig+0x9a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a2b      	ldr	r2, [pc, #172]	; (8004d4c <TIM_Base_SetConfig+0x11c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <TIM_Base_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2a      	ldr	r2, [pc, #168]	; (8004d50 <TIM_Base_SetConfig+0x120>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00f      	beq.n	8004cca <TIM_Base_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a29      	ldr	r2, [pc, #164]	; (8004d54 <TIM_Base_SetConfig+0x124>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <TIM_Base_SetConfig+0x9a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a28      	ldr	r2, [pc, #160]	; (8004d58 <TIM_Base_SetConfig+0x128>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d007      	beq.n	8004cca <TIM_Base_SetConfig+0x9a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a27      	ldr	r2, [pc, #156]	; (8004d5c <TIM_Base_SetConfig+0x12c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <TIM_Base_SetConfig+0x9a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a26      	ldr	r2, [pc, #152]	; (8004d60 <TIM_Base_SetConfig+0x130>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d108      	bne.n	8004cdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <TIM_Base_SetConfig+0x114>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <TIM_Base_SetConfig+0xf8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <TIM_Base_SetConfig+0x124>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0xf8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <TIM_Base_SetConfig+0x128>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0xf8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a10      	ldr	r2, [pc, #64]	; (8004d5c <TIM_Base_SetConfig+0x12c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0xf8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a0f      	ldr	r2, [pc, #60]	; (8004d60 <TIM_Base_SetConfig+0x130>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d103      	bne.n	8004d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	615a      	str	r2, [r3, #20]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	40000c00 	.word	0x40000c00
 8004d54:	40013400 	.word	0x40013400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800

08004d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 0302 	bic.w	r3, r3, #2
 8004db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <TIM_OC1_SetConfig+0x10c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00f      	beq.n	8004de4 <TIM_OC1_SetConfig+0x80>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <TIM_OC1_SetConfig+0x110>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <TIM_OC1_SetConfig+0x80>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <TIM_OC1_SetConfig+0x114>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d007      	beq.n	8004de4 <TIM_OC1_SetConfig+0x80>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <TIM_OC1_SetConfig+0x118>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_OC1_SetConfig+0x80>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a28      	ldr	r2, [pc, #160]	; (8004e80 <TIM_OC1_SetConfig+0x11c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d10c      	bne.n	8004dfe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0308 	bic.w	r3, r3, #8
 8004dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <TIM_OC1_SetConfig+0x10c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_OC1_SetConfig+0xc2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <TIM_OC1_SetConfig+0x110>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_OC1_SetConfig+0xc2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <TIM_OC1_SetConfig+0x114>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_OC1_SetConfig+0xc2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <TIM_OC1_SetConfig+0x118>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_OC1_SetConfig+0xc2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <TIM_OC1_SetConfig+0x11c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d111      	bne.n	8004e4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0210 	bic.w	r2, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f023 0320 	bic.w	r3, r3, #32
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a28      	ldr	r2, [pc, #160]	; (8004f84 <TIM_OC2_SetConfig+0x100>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_OC2_SetConfig+0x6c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a27      	ldr	r2, [pc, #156]	; (8004f88 <TIM_OC2_SetConfig+0x104>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10d      	bne.n	8004f0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <TIM_OC2_SetConfig+0x100>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00f      	beq.n	8004f34 <TIM_OC2_SetConfig+0xb0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <TIM_OC2_SetConfig+0x104>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <TIM_OC2_SetConfig+0xb0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <TIM_OC2_SetConfig+0x108>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_OC2_SetConfig+0xb0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <TIM_OC2_SetConfig+0x10c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_OC2_SetConfig+0xb0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <TIM_OC2_SetConfig+0x110>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d113      	bne.n	8004f5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40013400 	.word	0x40013400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800

08004f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <TIM_OC3_SetConfig+0xfc>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_OC3_SetConfig+0x6a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a26      	ldr	r2, [pc, #152]	; (8005098 <TIM_OC3_SetConfig+0x100>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d10d      	bne.n	800501e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800501c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <TIM_OC3_SetConfig+0xfc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00f      	beq.n	8005046 <TIM_OC3_SetConfig+0xae>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1b      	ldr	r2, [pc, #108]	; (8005098 <TIM_OC3_SetConfig+0x100>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00b      	beq.n	8005046 <TIM_OC3_SetConfig+0xae>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1a      	ldr	r2, [pc, #104]	; (800509c <TIM_OC3_SetConfig+0x104>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d007      	beq.n	8005046 <TIM_OC3_SetConfig+0xae>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a19      	ldr	r2, [pc, #100]	; (80050a0 <TIM_OC3_SetConfig+0x108>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_OC3_SetConfig+0xae>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <TIM_OC3_SetConfig+0x10c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d113      	bne.n	800506e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800504c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	621a      	str	r2, [r3, #32]
}
 8005088:	bf00      	nop
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40013400 	.word	0x40013400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800

080050a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <TIM_OC4_SetConfig+0xc0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00f      	beq.n	800512c <TIM_OC4_SetConfig+0x84>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a17      	ldr	r2, [pc, #92]	; (800516c <TIM_OC4_SetConfig+0xc4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00b      	beq.n	800512c <TIM_OC4_SetConfig+0x84>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a16      	ldr	r2, [pc, #88]	; (8005170 <TIM_OC4_SetConfig+0xc8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_OC4_SetConfig+0x84>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <TIM_OC4_SetConfig+0xcc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC4_SetConfig+0x84>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a14      	ldr	r2, [pc, #80]	; (8005178 <TIM_OC4_SetConfig+0xd0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d109      	bne.n	8005140 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40013400 	.word	0x40013400
 8005170:	40014000 	.word	0x40014000
 8005174:	40014400 	.word	0x40014400
 8005178:	40014800 	.word	0x40014800

0800517c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a17      	ldr	r2, [pc, #92]	; (8005230 <TIM_OC5_SetConfig+0xb4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00f      	beq.n	80051f6 <TIM_OC5_SetConfig+0x7a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a16      	ldr	r2, [pc, #88]	; (8005234 <TIM_OC5_SetConfig+0xb8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <TIM_OC5_SetConfig+0x7a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a15      	ldr	r2, [pc, #84]	; (8005238 <TIM_OC5_SetConfig+0xbc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_OC5_SetConfig+0x7a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a14      	ldr	r2, [pc, #80]	; (800523c <TIM_OC5_SetConfig+0xc0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC5_SetConfig+0x7a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <TIM_OC5_SetConfig+0xc4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d109      	bne.n	800520a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	621a      	str	r2, [r3, #32]
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800

08005244 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800528a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	051b      	lsls	r3, r3, #20
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a18      	ldr	r2, [pc, #96]	; (80052fc <TIM_OC6_SetConfig+0xb8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00f      	beq.n	80052c0 <TIM_OC6_SetConfig+0x7c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a17      	ldr	r2, [pc, #92]	; (8005300 <TIM_OC6_SetConfig+0xbc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_OC6_SetConfig+0x7c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a16      	ldr	r2, [pc, #88]	; (8005304 <TIM_OC6_SetConfig+0xc0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_OC6_SetConfig+0x7c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <TIM_OC6_SetConfig+0xc4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC6_SetConfig+0x7c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a14      	ldr	r2, [pc, #80]	; (800530c <TIM_OC6_SetConfig+0xc8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d109      	bne.n	80052d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	029b      	lsls	r3, r3, #10
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40013400 	.word	0x40013400
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800

08005310 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533a:	f023 0307 	bic.w	r3, r3, #7
 800533e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b70      	cmp	r3, #112	; 0x70
 8005358:	d01a      	beq.n	8005390 <TIM_SlaveTimer_SetConfig+0x80>
 800535a:	2b70      	cmp	r3, #112	; 0x70
 800535c:	d860      	bhi.n	8005420 <TIM_SlaveTimer_SetConfig+0x110>
 800535e:	2b60      	cmp	r3, #96	; 0x60
 8005360:	d054      	beq.n	800540c <TIM_SlaveTimer_SetConfig+0xfc>
 8005362:	2b60      	cmp	r3, #96	; 0x60
 8005364:	d85c      	bhi.n	8005420 <TIM_SlaveTimer_SetConfig+0x110>
 8005366:	2b50      	cmp	r3, #80	; 0x50
 8005368:	d046      	beq.n	80053f8 <TIM_SlaveTimer_SetConfig+0xe8>
 800536a:	2b50      	cmp	r3, #80	; 0x50
 800536c:	d858      	bhi.n	8005420 <TIM_SlaveTimer_SetConfig+0x110>
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d019      	beq.n	80053a6 <TIM_SlaveTimer_SetConfig+0x96>
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d854      	bhi.n	8005420 <TIM_SlaveTimer_SetConfig+0x110>
 8005376:	2b30      	cmp	r3, #48	; 0x30
 8005378:	d054      	beq.n	8005424 <TIM_SlaveTimer_SetConfig+0x114>
 800537a:	2b30      	cmp	r3, #48	; 0x30
 800537c:	d850      	bhi.n	8005420 <TIM_SlaveTimer_SetConfig+0x110>
 800537e:	2b20      	cmp	r3, #32
 8005380:	d050      	beq.n	8005424 <TIM_SlaveTimer_SetConfig+0x114>
 8005382:	2b20      	cmp	r3, #32
 8005384:	d84c      	bhi.n	8005420 <TIM_SlaveTimer_SetConfig+0x110>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d04c      	beq.n	8005424 <TIM_SlaveTimer_SetConfig+0x114>
 800538a:	2b10      	cmp	r3, #16
 800538c:	d04a      	beq.n	8005424 <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800538e:	e047      	b.n	8005420 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68d9      	ldr	r1, [r3, #12]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f000 f9e4 	bl	800576c <TIM_ETR_SetConfig>
      break;
 80053a4:	e03f      	b.n	8005426 <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d101      	bne.n	80053b2 <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e03a      	b.n	8005428 <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0201 	bic.w	r2, r2, #1
 80053c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	621a      	str	r2, [r3, #32]
      break;
 80053f6:	e016      	b.n	8005426 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6899      	ldr	r1, [r3, #8]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	461a      	mov	r2, r3
 8005406:	f000 f881 	bl	800550c <TIM_TI1_ConfigInputStage>
      break;
 800540a:	e00c      	b.n	8005426 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	461a      	mov	r2, r3
 800541a:	f000 f8e3 	bl	80055e4 <TIM_TI2_ConfigInputStage>
      break;
 800541e:	e002      	b.n	8005426 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8005420:	bf00      	nop
 8005422:	e000      	b.n	8005426 <TIM_SlaveTimer_SetConfig+0x116>
        break;
 8005424:	bf00      	nop
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a26      	ldr	r2, [pc, #152]	; (80054f4 <TIM_TI1_SetConfig+0xc4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d017      	beq.n	800548e <TIM_TI1_SetConfig+0x5e>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005464:	d013      	beq.n	800548e <TIM_TI1_SetConfig+0x5e>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <TIM_TI1_SetConfig+0xc8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00f      	beq.n	800548e <TIM_TI1_SetConfig+0x5e>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a22      	ldr	r2, [pc, #136]	; (80054fc <TIM_TI1_SetConfig+0xcc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <TIM_TI1_SetConfig+0x5e>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a21      	ldr	r2, [pc, #132]	; (8005500 <TIM_TI1_SetConfig+0xd0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_TI1_SetConfig+0x5e>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a20      	ldr	r2, [pc, #128]	; (8005504 <TIM_TI1_SetConfig+0xd4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_TI1_SetConfig+0x5e>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a1f      	ldr	r2, [pc, #124]	; (8005508 <TIM_TI1_SetConfig+0xd8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <TIM_TI1_SetConfig+0x62>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <TIM_TI1_SetConfig+0x64>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e003      	b.n	80054b2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f023 030a 	bic.w	r3, r3, #10
 80054cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f003 030a 	and.w	r3, r3, #10
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40013400 	.word	0x40013400
 8005508:	40014000 	.word	0x40014000

0800550c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f023 030a 	bic.w	r3, r3, #10
 8005548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800556a:	b480      	push	{r7}
 800556c:	b087      	sub	sp, #28
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f023 0210 	bic.w	r2, r3, #16
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	031b      	lsls	r3, r3, #12
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	621a      	str	r2, [r3, #32]
}
 80055d8:	bf00      	nop
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f023 0210 	bic.w	r2, r3, #16
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800560e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	031b      	lsls	r3, r3, #12
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	621a      	str	r2, [r3, #32]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f023 0303 	bic.w	r3, r3, #3
 8005670:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005680:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	b2db      	uxtb	r3, r3
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005694:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	031b      	lsls	r3, r3, #12
 8005700:	b29b      	uxth	r3, r3
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800570e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	031b      	lsls	r3, r3, #12
 8005714:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	f043 0307 	orr.w	r3, r3, #7
 8005758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	609a      	str	r2, [r3, #8]
}
 8005760:	bf00      	nop
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	021a      	lsls	r2, r3, #8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	431a      	orrs	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4313      	orrs	r3, r2
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	609a      	str	r2, [r3, #8]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2201      	movs	r2, #1
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	401a      	ands	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	fa01 f303 	lsl.w	r3, r1, r3
 80057e4:	431a      	orrs	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800580c:	2302      	movs	r3, #2
 800580e:	e068      	b.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a2e      	ldr	r2, [pc, #184]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2d      	ldr	r2, [pc, #180]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d108      	bne.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800584a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1e      	ldr	r2, [pc, #120]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01d      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005882:	d018      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d013      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00e      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a18      	ldr	r2, [pc, #96]	; (8005900 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d009      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d004      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a14      	ldr	r2, [pc, #80]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10c      	bne.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40013400 	.word	0x40013400
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800
 8005900:	40000c00 	.word	0x40000c00
 8005904:	40014000 	.word	0x40014000

08005908 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005920:	2302      	movs	r3, #2
 8005922:	e065      	b.n	80059f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a16      	ldr	r2, [pc, #88]	; (80059fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d115      	bne.n	80059de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	051b      	lsls	r3, r3, #20
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40013400 	.word	0x40013400

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e040      	b.n	8005ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fc f8ac 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fbf8 	bl	8006274 <UART_SetConfig>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e022      	b.n	8005ad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fe76 	bl	8006788 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fefd 	bl	80068cc <UART_CheckIdleState>
 8005ad2:	4603      	mov	r3, r0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08a      	sub	sp, #40	; 0x28
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	f040 8082 	bne.w	8005bfa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_UART_Transmit+0x26>
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e07a      	b.n	8005bfc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Transmit+0x38>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e073      	b.n	8005bfc <HAL_UART_Transmit+0x120>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2221      	movs	r2, #33	; 0x21
 8005b28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b2a:	f7fc fb57 	bl	80021dc <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	88fa      	ldrh	r2, [r7, #6]
 8005b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d108      	bne.n	8005b5c <HAL_UART_Transmit+0x80>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	e003      	b.n	8005b64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b6c:	e02d      	b.n	8005bca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	2180      	movs	r1, #128	; 0x80
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fef0 	bl	800695e <UART_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e039      	b.n	8005bfc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10b      	bne.n	8005ba6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	881a      	ldrh	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9a:	b292      	uxth	r2, r2
 8005b9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	e008      	b.n	8005bb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	781a      	ldrb	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	b292      	uxth	r2, r2
 8005bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1cb      	bne.n	8005b6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2140      	movs	r1, #64	; 0x40
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 febc 	bl	800695e <UART_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e005      	b.n	8005bfc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e000      	b.n	8005bfc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bfa:	2302      	movs	r3, #2
  }
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3720      	adds	r7, #32
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	f040 80bf 	bne.w	8005d9c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_UART_Receive+0x26>
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e0b7      	b.n	8005d9e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_UART_Receive+0x38>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e0b0      	b.n	8005d9e <HAL_UART_Receive+0x19a>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2222      	movs	r2, #34	; 0x22
 8005c50:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c58:	f7fc fac0 	bl	80021dc <HAL_GetTick>
 8005c5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c76:	d10e      	bne.n	8005c96 <HAL_UART_Receive+0x92>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <HAL_UART_Receive+0x88>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c8a:	e02d      	b.n	8005ce8 <HAL_UART_Receive+0xe4>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	22ff      	movs	r2, #255	; 0xff
 8005c90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c94:	e028      	b.n	8005ce8 <HAL_UART_Receive+0xe4>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10d      	bne.n	8005cba <HAL_UART_Receive+0xb6>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <HAL_UART_Receive+0xac>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	22ff      	movs	r2, #255	; 0xff
 8005caa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cae:	e01b      	b.n	8005ce8 <HAL_UART_Receive+0xe4>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	227f      	movs	r2, #127	; 0x7f
 8005cb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cb8:	e016      	b.n	8005ce8 <HAL_UART_Receive+0xe4>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc2:	d10d      	bne.n	8005ce0 <HAL_UART_Receive+0xdc>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <HAL_UART_Receive+0xd2>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	227f      	movs	r2, #127	; 0x7f
 8005cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cd4:	e008      	b.n	8005ce8 <HAL_UART_Receive+0xe4>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	223f      	movs	r2, #63	; 0x3f
 8005cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cde:	e003      	b.n	8005ce8 <HAL_UART_Receive+0xe4>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf8:	d108      	bne.n	8005d0c <HAL_UART_Receive+0x108>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e003      	b.n	8005d14 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d1c:	e033      	b.n	8005d86 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2120      	movs	r1, #32
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fe18 	bl	800695e <UART_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e032      	b.n	8005d9e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10c      	bne.n	8005d58 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	8a7b      	ldrh	r3, [r7, #18]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	3302      	adds	r3, #2
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	e00d      	b.n	8005d74 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	8a7b      	ldrh	r3, [r7, #18]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	4013      	ands	r3, r2
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3301      	adds	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1c5      	bne.n	8005d1e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e000      	b.n	8005d9e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
  }
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d131      	bne.n	8005e22 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <HAL_UART_Receive_IT+0x22>
 8005dc4:	88fb      	ldrh	r3, [r7, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e02a      	b.n	8005e24 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_UART_Receive_IT+0x34>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e023      	b.n	8005e24 <HAL_UART_Receive_IT+0x7c>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a0f      	ldr	r2, [pc, #60]	; (8005e2c <HAL_UART_Receive_IT+0x84>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005e10:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	461a      	mov	r2, r3
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fe1d 	bl	8006a58 <UART_Start_Receive_IT>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	e000      	b.n	8005e24 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
  }
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40008000 	.word	0x40008000

08005e30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e56:	4013      	ands	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d113      	bne.n	8005e88 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00e      	beq.n	8005e88 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 81ce 	beq.w	800621a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
      }
      return;
 8005e86:	e1c8      	b.n	800621a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80e3 	beq.w	8006056 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d105      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	4ba6      	ldr	r3, [pc, #664]	; (8006138 <HAL_UART_IRQHandler+0x308>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80d8 	beq.w	8006056 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d010      	beq.n	8005ed2 <HAL_UART_IRQHandler+0xa2>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ec8:	f043 0201 	orr.w	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d010      	beq.n	8005efe <HAL_UART_IRQHandler+0xce>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2202      	movs	r2, #2
 8005eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef4:	f043 0204 	orr.w	r2, r3, #4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <HAL_UART_IRQHandler+0xfa>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2204      	movs	r2, #4
 8005f18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f20:	f043 0202 	orr.w	r2, r3, #2
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d015      	beq.n	8005f60 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f56:	f043 0208 	orr.w	r2, r3, #8
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d011      	beq.n	8005f8e <HAL_UART_IRQHandler+0x15e>
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00c      	beq.n	8005f8e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f84:	f043 0220 	orr.w	r2, r3, #32
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8142 	beq.w	800621e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00c      	beq.n	8005fbe <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b40      	cmp	r3, #64	; 0x40
 8005fd2:	d004      	beq.n	8005fde <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d031      	beq.n	8006042 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fdc2 	bl	8006b68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d123      	bne.n	800603a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006000:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	2b00      	cmp	r3, #0
 8006008:	d013      	beq.n	8006032 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	4a4b      	ldr	r2, [pc, #300]	; (800613c <HAL_UART_IRQHandler+0x30c>)
 8006010:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	4618      	mov	r0, r3
 8006018:	f7fc fa5f 	bl	80024da <HAL_DMA_Abort_IT>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d017      	beq.n	8006052 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800602c:	4610      	mov	r0, r2
 800602e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	e00f      	b.n	8006052 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f908 	bl	8006248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	e00b      	b.n	8006052 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f904 	bl	8006248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	e007      	b.n	8006052 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f900 	bl	8006248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006050:	e0e5      	b.n	800621e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006052:	bf00      	nop
    return;
 8006054:	e0e3      	b.n	800621e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605a:	2b01      	cmp	r3, #1
 800605c:	f040 80a9 	bne.w	80061b2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80a3 	beq.w	80061b2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f003 0310 	and.w	r3, r3, #16
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 809d 	beq.w	80061b2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2210      	movs	r2, #16
 800607e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d158      	bne.n	8006140 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006098:	893b      	ldrh	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80c1 	beq.w	8006222 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060a6:	893a      	ldrh	r2, [r7, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	f080 80ba 	bcs.w	8006222 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	893a      	ldrh	r2, [r7, #8]
 80060b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d12a      	bne.n	800611c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0210 	bic.w	r2, r2, #16
 8006110:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006116:	4618      	mov	r0, r3
 8006118:	f7fc f9a1 	bl	800245e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006128:	b29b      	uxth	r3, r3
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	b29b      	uxth	r3, r3
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f893 	bl	800625c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006136:	e074      	b.n	8006222 <HAL_UART_IRQHandler+0x3f2>
 8006138:	04000120 	.word	0x04000120
 800613c:	08006bc7 	.word	0x08006bc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800614c:	b29b      	uxth	r3, r3
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d063      	beq.n	8006226 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800615e:	897b      	ldrh	r3, [r7, #10]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d060      	beq.n	8006226 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006172:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0210 	bic.w	r2, r2, #16
 80061a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061a6:	897b      	ldrh	r3, [r7, #10]
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f856 	bl	800625c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061b0:	e039      	b.n	8006226 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00d      	beq.n	80061d8 <HAL_UART_IRQHandler+0x3a8>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d008      	beq.n	80061d8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fdff 	bl	8006dd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061d6:	e029      	b.n	800622c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d008      	beq.n	80061fe <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01a      	beq.n	800622a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
    }
    return;
 80061fc:	e015      	b.n	800622a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d011      	beq.n	800622c <HAL_UART_IRQHandler+0x3fc>
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00c      	beq.n	800622c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fced 	bl	8006bf2 <UART_EndTransmit_IT>
    return;
 8006218:	e008      	b.n	800622c <HAL_UART_IRQHandler+0x3fc>
      return;
 800621a:	bf00      	nop
 800621c:	e006      	b.n	800622c <HAL_UART_IRQHandler+0x3fc>
    return;
 800621e:	bf00      	nop
 8006220:	e004      	b.n	800622c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006222:	bf00      	nop
 8006224:	e002      	b.n	800622c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006226:	bf00      	nop
 8006228:	e000      	b.n	800622c <HAL_UART_IRQHandler+0x3fc>
    return;
 800622a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800622c:	3720      	adds	r7, #32
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop

08006234 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006274:	b5b0      	push	{r4, r5, r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	4313      	orrs	r3, r2
 8006296:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4bad      	ldr	r3, [pc, #692]	; (8006554 <UART_SetConfig+0x2e0>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	69f9      	ldr	r1, [r7, #28]
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4aa2      	ldr	r2, [pc, #648]	; (8006558 <UART_SetConfig+0x2e4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	4313      	orrs	r3, r2
 80062da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a99      	ldr	r2, [pc, #612]	; (800655c <UART_SetConfig+0x2e8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d121      	bne.n	800633e <UART_SetConfig+0xca>
 80062fa:	4b99      	ldr	r3, [pc, #612]	; (8006560 <UART_SetConfig+0x2ec>)
 80062fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	2b03      	cmp	r3, #3
 8006306:	d817      	bhi.n	8006338 <UART_SetConfig+0xc4>
 8006308:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0x9c>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006321 	.word	0x08006321
 8006314:	0800632d 	.word	0x0800632d
 8006318:	08006327 	.word	0x08006327
 800631c:	08006333 	.word	0x08006333
 8006320:	2301      	movs	r3, #1
 8006322:	76fb      	strb	r3, [r7, #27]
 8006324:	e0e7      	b.n	80064f6 <UART_SetConfig+0x282>
 8006326:	2302      	movs	r3, #2
 8006328:	76fb      	strb	r3, [r7, #27]
 800632a:	e0e4      	b.n	80064f6 <UART_SetConfig+0x282>
 800632c:	2304      	movs	r3, #4
 800632e:	76fb      	strb	r3, [r7, #27]
 8006330:	e0e1      	b.n	80064f6 <UART_SetConfig+0x282>
 8006332:	2308      	movs	r3, #8
 8006334:	76fb      	strb	r3, [r7, #27]
 8006336:	e0de      	b.n	80064f6 <UART_SetConfig+0x282>
 8006338:	2310      	movs	r3, #16
 800633a:	76fb      	strb	r3, [r7, #27]
 800633c:	e0db      	b.n	80064f6 <UART_SetConfig+0x282>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a88      	ldr	r2, [pc, #544]	; (8006564 <UART_SetConfig+0x2f0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d132      	bne.n	80063ae <UART_SetConfig+0x13a>
 8006348:	4b85      	ldr	r3, [pc, #532]	; (8006560 <UART_SetConfig+0x2ec>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	f003 030c 	and.w	r3, r3, #12
 8006352:	2b0c      	cmp	r3, #12
 8006354:	d828      	bhi.n	80063a8 <UART_SetConfig+0x134>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <UART_SetConfig+0xe8>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	08006391 	.word	0x08006391
 8006360:	080063a9 	.word	0x080063a9
 8006364:	080063a9 	.word	0x080063a9
 8006368:	080063a9 	.word	0x080063a9
 800636c:	0800639d 	.word	0x0800639d
 8006370:	080063a9 	.word	0x080063a9
 8006374:	080063a9 	.word	0x080063a9
 8006378:	080063a9 	.word	0x080063a9
 800637c:	08006397 	.word	0x08006397
 8006380:	080063a9 	.word	0x080063a9
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063a9 	.word	0x080063a9
 800638c:	080063a3 	.word	0x080063a3
 8006390:	2300      	movs	r3, #0
 8006392:	76fb      	strb	r3, [r7, #27]
 8006394:	e0af      	b.n	80064f6 <UART_SetConfig+0x282>
 8006396:	2302      	movs	r3, #2
 8006398:	76fb      	strb	r3, [r7, #27]
 800639a:	e0ac      	b.n	80064f6 <UART_SetConfig+0x282>
 800639c:	2304      	movs	r3, #4
 800639e:	76fb      	strb	r3, [r7, #27]
 80063a0:	e0a9      	b.n	80064f6 <UART_SetConfig+0x282>
 80063a2:	2308      	movs	r3, #8
 80063a4:	76fb      	strb	r3, [r7, #27]
 80063a6:	e0a6      	b.n	80064f6 <UART_SetConfig+0x282>
 80063a8:	2310      	movs	r3, #16
 80063aa:	76fb      	strb	r3, [r7, #27]
 80063ac:	e0a3      	b.n	80064f6 <UART_SetConfig+0x282>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a6d      	ldr	r2, [pc, #436]	; (8006568 <UART_SetConfig+0x2f4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d120      	bne.n	80063fa <UART_SetConfig+0x186>
 80063b8:	4b69      	ldr	r3, [pc, #420]	; (8006560 <UART_SetConfig+0x2ec>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063c2:	2b30      	cmp	r3, #48	; 0x30
 80063c4:	d013      	beq.n	80063ee <UART_SetConfig+0x17a>
 80063c6:	2b30      	cmp	r3, #48	; 0x30
 80063c8:	d814      	bhi.n	80063f4 <UART_SetConfig+0x180>
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d009      	beq.n	80063e2 <UART_SetConfig+0x16e>
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d810      	bhi.n	80063f4 <UART_SetConfig+0x180>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <UART_SetConfig+0x168>
 80063d6:	2b10      	cmp	r3, #16
 80063d8:	d006      	beq.n	80063e8 <UART_SetConfig+0x174>
 80063da:	e00b      	b.n	80063f4 <UART_SetConfig+0x180>
 80063dc:	2300      	movs	r3, #0
 80063de:	76fb      	strb	r3, [r7, #27]
 80063e0:	e089      	b.n	80064f6 <UART_SetConfig+0x282>
 80063e2:	2302      	movs	r3, #2
 80063e4:	76fb      	strb	r3, [r7, #27]
 80063e6:	e086      	b.n	80064f6 <UART_SetConfig+0x282>
 80063e8:	2304      	movs	r3, #4
 80063ea:	76fb      	strb	r3, [r7, #27]
 80063ec:	e083      	b.n	80064f6 <UART_SetConfig+0x282>
 80063ee:	2308      	movs	r3, #8
 80063f0:	76fb      	strb	r3, [r7, #27]
 80063f2:	e080      	b.n	80064f6 <UART_SetConfig+0x282>
 80063f4:	2310      	movs	r3, #16
 80063f6:	76fb      	strb	r3, [r7, #27]
 80063f8:	e07d      	b.n	80064f6 <UART_SetConfig+0x282>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a5b      	ldr	r2, [pc, #364]	; (800656c <UART_SetConfig+0x2f8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d120      	bne.n	8006446 <UART_SetConfig+0x1d2>
 8006404:	4b56      	ldr	r3, [pc, #344]	; (8006560 <UART_SetConfig+0x2ec>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800640e:	2bc0      	cmp	r3, #192	; 0xc0
 8006410:	d013      	beq.n	800643a <UART_SetConfig+0x1c6>
 8006412:	2bc0      	cmp	r3, #192	; 0xc0
 8006414:	d814      	bhi.n	8006440 <UART_SetConfig+0x1cc>
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d009      	beq.n	800642e <UART_SetConfig+0x1ba>
 800641a:	2b80      	cmp	r3, #128	; 0x80
 800641c:	d810      	bhi.n	8006440 <UART_SetConfig+0x1cc>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <UART_SetConfig+0x1b4>
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d006      	beq.n	8006434 <UART_SetConfig+0x1c0>
 8006426:	e00b      	b.n	8006440 <UART_SetConfig+0x1cc>
 8006428:	2300      	movs	r3, #0
 800642a:	76fb      	strb	r3, [r7, #27]
 800642c:	e063      	b.n	80064f6 <UART_SetConfig+0x282>
 800642e:	2302      	movs	r3, #2
 8006430:	76fb      	strb	r3, [r7, #27]
 8006432:	e060      	b.n	80064f6 <UART_SetConfig+0x282>
 8006434:	2304      	movs	r3, #4
 8006436:	76fb      	strb	r3, [r7, #27]
 8006438:	e05d      	b.n	80064f6 <UART_SetConfig+0x282>
 800643a:	2308      	movs	r3, #8
 800643c:	76fb      	strb	r3, [r7, #27]
 800643e:	e05a      	b.n	80064f6 <UART_SetConfig+0x282>
 8006440:	2310      	movs	r3, #16
 8006442:	76fb      	strb	r3, [r7, #27]
 8006444:	e057      	b.n	80064f6 <UART_SetConfig+0x282>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a49      	ldr	r2, [pc, #292]	; (8006570 <UART_SetConfig+0x2fc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d125      	bne.n	800649c <UART_SetConfig+0x228>
 8006450:	4b43      	ldr	r3, [pc, #268]	; (8006560 <UART_SetConfig+0x2ec>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800645e:	d017      	beq.n	8006490 <UART_SetConfig+0x21c>
 8006460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006464:	d817      	bhi.n	8006496 <UART_SetConfig+0x222>
 8006466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646a:	d00b      	beq.n	8006484 <UART_SetConfig+0x210>
 800646c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006470:	d811      	bhi.n	8006496 <UART_SetConfig+0x222>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <UART_SetConfig+0x20a>
 8006476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647a:	d006      	beq.n	800648a <UART_SetConfig+0x216>
 800647c:	e00b      	b.n	8006496 <UART_SetConfig+0x222>
 800647e:	2300      	movs	r3, #0
 8006480:	76fb      	strb	r3, [r7, #27]
 8006482:	e038      	b.n	80064f6 <UART_SetConfig+0x282>
 8006484:	2302      	movs	r3, #2
 8006486:	76fb      	strb	r3, [r7, #27]
 8006488:	e035      	b.n	80064f6 <UART_SetConfig+0x282>
 800648a:	2304      	movs	r3, #4
 800648c:	76fb      	strb	r3, [r7, #27]
 800648e:	e032      	b.n	80064f6 <UART_SetConfig+0x282>
 8006490:	2308      	movs	r3, #8
 8006492:	76fb      	strb	r3, [r7, #27]
 8006494:	e02f      	b.n	80064f6 <UART_SetConfig+0x282>
 8006496:	2310      	movs	r3, #16
 8006498:	76fb      	strb	r3, [r7, #27]
 800649a:	e02c      	b.n	80064f6 <UART_SetConfig+0x282>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <UART_SetConfig+0x2e4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d125      	bne.n	80064f2 <UART_SetConfig+0x27e>
 80064a6:	4b2e      	ldr	r3, [pc, #184]	; (8006560 <UART_SetConfig+0x2ec>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064b4:	d017      	beq.n	80064e6 <UART_SetConfig+0x272>
 80064b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ba:	d817      	bhi.n	80064ec <UART_SetConfig+0x278>
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c0:	d00b      	beq.n	80064da <UART_SetConfig+0x266>
 80064c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c6:	d811      	bhi.n	80064ec <UART_SetConfig+0x278>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <UART_SetConfig+0x260>
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d0:	d006      	beq.n	80064e0 <UART_SetConfig+0x26c>
 80064d2:	e00b      	b.n	80064ec <UART_SetConfig+0x278>
 80064d4:	2300      	movs	r3, #0
 80064d6:	76fb      	strb	r3, [r7, #27]
 80064d8:	e00d      	b.n	80064f6 <UART_SetConfig+0x282>
 80064da:	2302      	movs	r3, #2
 80064dc:	76fb      	strb	r3, [r7, #27]
 80064de:	e00a      	b.n	80064f6 <UART_SetConfig+0x282>
 80064e0:	2304      	movs	r3, #4
 80064e2:	76fb      	strb	r3, [r7, #27]
 80064e4:	e007      	b.n	80064f6 <UART_SetConfig+0x282>
 80064e6:	2308      	movs	r3, #8
 80064e8:	76fb      	strb	r3, [r7, #27]
 80064ea:	e004      	b.n	80064f6 <UART_SetConfig+0x282>
 80064ec:	2310      	movs	r3, #16
 80064ee:	76fb      	strb	r3, [r7, #27]
 80064f0:	e001      	b.n	80064f6 <UART_SetConfig+0x282>
 80064f2:	2310      	movs	r3, #16
 80064f4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a17      	ldr	r2, [pc, #92]	; (8006558 <UART_SetConfig+0x2e4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	f040 8087 	bne.w	8006610 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006502:	7efb      	ldrb	r3, [r7, #27]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d837      	bhi.n	8006578 <UART_SetConfig+0x304>
 8006508:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <UART_SetConfig+0x29c>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006535 	.word	0x08006535
 8006514:	08006579 	.word	0x08006579
 8006518:	0800653d 	.word	0x0800653d
 800651c:	08006579 	.word	0x08006579
 8006520:	08006543 	.word	0x08006543
 8006524:	08006579 	.word	0x08006579
 8006528:	08006579 	.word	0x08006579
 800652c:	08006579 	.word	0x08006579
 8006530:	0800654b 	.word	0x0800654b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006534:	f7fc ffb0 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8006538:	6178      	str	r0, [r7, #20]
        break;
 800653a:	e022      	b.n	8006582 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800653c:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <UART_SetConfig+0x300>)
 800653e:	617b      	str	r3, [r7, #20]
        break;
 8006540:	e01f      	b.n	8006582 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006542:	f7fc ff11 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8006546:	6178      	str	r0, [r7, #20]
        break;
 8006548:	e01b      	b.n	8006582 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654e:	617b      	str	r3, [r7, #20]
        break;
 8006550:	e017      	b.n	8006582 <UART_SetConfig+0x30e>
 8006552:	bf00      	nop
 8006554:	efff69f3 	.word	0xefff69f3
 8006558:	40008000 	.word	0x40008000
 800655c:	40013800 	.word	0x40013800
 8006560:	40021000 	.word	0x40021000
 8006564:	40004400 	.word	0x40004400
 8006568:	40004800 	.word	0x40004800
 800656c:	40004c00 	.word	0x40004c00
 8006570:	40005000 	.word	0x40005000
 8006574:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	76bb      	strb	r3, [r7, #26]
        break;
 8006580:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80f1 	beq.w	800676c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	4413      	add	r3, r2
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	429a      	cmp	r2, r3
 8006598:	d305      	bcc.n	80065a6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d902      	bls.n	80065ac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	76bb      	strb	r3, [r7, #26]
 80065aa:	e0df      	b.n	800676c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f04f 0100 	mov.w	r1, #0
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	020b      	lsls	r3, r1, #8
 80065be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065c2:	0202      	lsls	r2, r0, #8
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	6849      	ldr	r1, [r1, #4]
 80065c8:	0849      	lsrs	r1, r1, #1
 80065ca:	4608      	mov	r0, r1
 80065cc:	f04f 0100 	mov.w	r1, #0
 80065d0:	1814      	adds	r4, r2, r0
 80065d2:	eb43 0501 	adc.w	r5, r3, r1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	461a      	mov	r2, r3
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	4620      	mov	r0, r4
 80065e2:	4629      	mov	r1, r5
 80065e4:	f7f9 fdf0 	bl	80001c8 <__aeabi_uldivmod>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4613      	mov	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f6:	d308      	bcc.n	800660a <UART_SetConfig+0x396>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065fe:	d204      	bcs.n	800660a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	e0b0      	b.n	800676c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	76bb      	strb	r3, [r7, #26]
 800660e:	e0ad      	b.n	800676c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006618:	d15c      	bne.n	80066d4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800661a:	7efb      	ldrb	r3, [r7, #27]
 800661c:	2b08      	cmp	r3, #8
 800661e:	d828      	bhi.n	8006672 <UART_SetConfig+0x3fe>
 8006620:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <UART_SetConfig+0x3b4>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	0800664d 	.word	0x0800664d
 800662c:	08006655 	.word	0x08006655
 8006630:	0800665d 	.word	0x0800665d
 8006634:	08006673 	.word	0x08006673
 8006638:	08006663 	.word	0x08006663
 800663c:	08006673 	.word	0x08006673
 8006640:	08006673 	.word	0x08006673
 8006644:	08006673 	.word	0x08006673
 8006648:	0800666b 	.word	0x0800666b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800664c:	f7fc ff24 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8006650:	6178      	str	r0, [r7, #20]
        break;
 8006652:	e013      	b.n	800667c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006654:	f7fc ff36 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8006658:	6178      	str	r0, [r7, #20]
        break;
 800665a:	e00f      	b.n	800667c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800665c:	4b49      	ldr	r3, [pc, #292]	; (8006784 <UART_SetConfig+0x510>)
 800665e:	617b      	str	r3, [r7, #20]
        break;
 8006660:	e00c      	b.n	800667c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006662:	f7fc fe81 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8006666:	6178      	str	r0, [r7, #20]
        break;
 8006668:	e008      	b.n	800667c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800666a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800666e:	617b      	str	r3, [r7, #20]
        break;
 8006670:	e004      	b.n	800667c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	76bb      	strb	r3, [r7, #26]
        break;
 800667a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d074      	beq.n	800676c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	005a      	lsls	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	441a      	add	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	fbb2 f3f3 	udiv	r3, r2, r3
 8006696:	b29b      	uxth	r3, r3
 8006698:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b0f      	cmp	r3, #15
 800669e:	d916      	bls.n	80066ce <UART_SetConfig+0x45a>
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a6:	d212      	bcs.n	80066ce <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f023 030f 	bic.w	r3, r3, #15
 80066b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	085b      	lsrs	r3, r3, #1
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	b29a      	uxth	r2, r3
 80066be:	89fb      	ldrh	r3, [r7, #14]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	89fa      	ldrh	r2, [r7, #14]
 80066ca:	60da      	str	r2, [r3, #12]
 80066cc:	e04e      	b.n	800676c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	76bb      	strb	r3, [r7, #26]
 80066d2:	e04b      	b.n	800676c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066d4:	7efb      	ldrb	r3, [r7, #27]
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d827      	bhi.n	800672a <UART_SetConfig+0x4b6>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <UART_SetConfig+0x46c>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	08006705 	.word	0x08006705
 80066e4:	0800670d 	.word	0x0800670d
 80066e8:	08006715 	.word	0x08006715
 80066ec:	0800672b 	.word	0x0800672b
 80066f0:	0800671b 	.word	0x0800671b
 80066f4:	0800672b 	.word	0x0800672b
 80066f8:	0800672b 	.word	0x0800672b
 80066fc:	0800672b 	.word	0x0800672b
 8006700:	08006723 	.word	0x08006723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006704:	f7fc fec8 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8006708:	6178      	str	r0, [r7, #20]
        break;
 800670a:	e013      	b.n	8006734 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800670c:	f7fc feda 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8006710:	6178      	str	r0, [r7, #20]
        break;
 8006712:	e00f      	b.n	8006734 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006714:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <UART_SetConfig+0x510>)
 8006716:	617b      	str	r3, [r7, #20]
        break;
 8006718:	e00c      	b.n	8006734 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800671a:	f7fc fe25 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 800671e:	6178      	str	r0, [r7, #20]
        break;
 8006720:	e008      	b.n	8006734 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006726:	617b      	str	r3, [r7, #20]
        break;
 8006728:	e004      	b.n	8006734 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	76bb      	strb	r3, [r7, #26]
        break;
 8006732:	bf00      	nop
    }

    if (pclk != 0U)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d018      	beq.n	800676c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	085a      	lsrs	r2, r3, #1
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	441a      	add	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	fbb2 f3f3 	udiv	r3, r2, r3
 800674c:	b29b      	uxth	r3, r3
 800674e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	2b0f      	cmp	r3, #15
 8006754:	d908      	bls.n	8006768 <UART_SetConfig+0x4f4>
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800675c:	d204      	bcs.n	8006768 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	60da      	str	r2, [r3, #12]
 8006766:	e001      	b.n	800676c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006778:	7ebb      	ldrb	r3, [r7, #26]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bdb0      	pop	{r4, r5, r7, pc}
 8006782:	bf00      	nop
 8006784:	00f42400 	.word	0x00f42400

08006788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01a      	beq.n	800689e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006886:	d10a      	bne.n	800689e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	605a      	str	r2, [r3, #4]
  }
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068dc:	f7fb fc7e 	bl	80021dc <HAL_GetTick>
 80068e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d10e      	bne.n	800690e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f82d 	bl	800695e <UART_WaitOnFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e023      	b.n	8006956 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b04      	cmp	r3, #4
 800691a:	d10e      	bne.n	800693a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f817 	bl	800695e <UART_WaitOnFlagUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e00d      	b.n	8006956 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	4613      	mov	r3, r2
 800696c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696e:	e05e      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d05a      	beq.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006978:	f7fb fc30 	bl	80021dc <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <UART_WaitOnFlagUntilTimeout+0x30>
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d11b      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800699c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0201 	bic.w	r2, r2, #1
 80069ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e043      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d02c      	beq.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e2:	d124      	bne.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ec:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069fc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0201 	bic.w	r2, r2, #1
 8006a0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2220      	movs	r2, #32
 8006a12:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2220      	movs	r2, #32
 8006a18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e00f      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4013      	ands	r3, r2
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2301      	moveq	r3, #1
 8006a40:	2300      	movne	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d091      	beq.n	8006970 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	88fa      	ldrh	r2, [r7, #6]
 8006a78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8a:	d10e      	bne.n	8006aaa <UART_Start_Receive_IT+0x52>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d105      	bne.n	8006aa0 <UART_Start_Receive_IT+0x48>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a9e:	e02d      	b.n	8006afc <UART_Start_Receive_IT+0xa4>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	22ff      	movs	r2, #255	; 0xff
 8006aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aa8:	e028      	b.n	8006afc <UART_Start_Receive_IT+0xa4>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10d      	bne.n	8006ace <UART_Start_Receive_IT+0x76>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <UART_Start_Receive_IT+0x6c>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	22ff      	movs	r2, #255	; 0xff
 8006abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac2:	e01b      	b.n	8006afc <UART_Start_Receive_IT+0xa4>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	227f      	movs	r2, #127	; 0x7f
 8006ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006acc:	e016      	b.n	8006afc <UART_Start_Receive_IT+0xa4>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad6:	d10d      	bne.n	8006af4 <UART_Start_Receive_IT+0x9c>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <UART_Start_Receive_IT+0x92>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	227f      	movs	r2, #127	; 0x7f
 8006ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ae8:	e008      	b.n	8006afc <UART_Start_Receive_IT+0xa4>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	223f      	movs	r2, #63	; 0x3f
 8006aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006af2:	e003      	b.n	8006afc <UART_Start_Receive_IT+0xa4>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2222      	movs	r2, #34	; 0x22
 8006b08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0201 	orr.w	r2, r2, #1
 8006b18:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b22:	d107      	bne.n	8006b34 <UART_Start_Receive_IT+0xdc>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4a0c      	ldr	r2, [pc, #48]	; (8006b60 <UART_Start_Receive_IT+0x108>)
 8006b30:	665a      	str	r2, [r3, #100]	; 0x64
 8006b32:	e002      	b.n	8006b3a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a0b      	ldr	r2, [pc, #44]	; (8006b64 <UART_Start_Receive_IT+0x10c>)
 8006b38:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006b50:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	08006cfd 	.word	0x08006cfd
 8006b64:	08006c25 	.word	0x08006c25

08006b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0201 	bic.w	r2, r2, #1
 8006b8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d107      	bne.n	8006ba8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0210 	bic.w	r2, r2, #16
 8006ba6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fb2f 	bl	8006248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c08:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff fb0c 	bl	8006234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c32:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c38:	2b22      	cmp	r3, #34	; 0x22
 8006c3a:	d151      	bne.n	8006ce0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c42:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c44:	89bb      	ldrh	r3, [r7, #12]
 8006c46:	b2d9      	uxtb	r1, r3
 8006c48:	89fb      	ldrh	r3, [r7, #14]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	400a      	ands	r2, r1
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d13a      	bne.n	8006cf4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d10f      	bne.n	8006cd2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0210 	bic.w	r2, r2, #16
 8006cc0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff fac6 	bl	800625c <HAL_UARTEx_RxEventCallback>
 8006cd0:	e002      	b.n	8006cd8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7f9 fee4 	bl	8000aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cde:	e009      	b.n	8006cf4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	8b1b      	ldrh	r3, [r3, #24]
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0208 	orr.w	r2, r2, #8
 8006cf0:	b292      	uxth	r2, r2
 8006cf2:	831a      	strh	r2, [r3, #24]
}
 8006cf4:	bf00      	nop
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d0a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d10:	2b22      	cmp	r3, #34	; 0x22
 8006d12:	d151      	bne.n	8006db8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d1a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d20:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d22:	89ba      	ldrh	r2, [r7, #12]
 8006d24:	89fb      	ldrh	r3, [r7, #14]
 8006d26:	4013      	ands	r3, r2
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d32:	1c9a      	adds	r2, r3, #2
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d13a      	bne.n	8006dcc <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0201 	bic.w	r2, r2, #1
 8006d74:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d10f      	bne.n	8006daa <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0210 	bic.w	r2, r2, #16
 8006d98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff fa5a 	bl	800625c <HAL_UARTEx_RxEventCallback>
 8006da8:	e002      	b.n	8006db0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7f9 fe78 	bl	8000aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006db6:	e009      	b.n	8006dcc <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	8b1b      	ldrh	r3, [r3, #24]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0208 	orr.w	r2, r2, #8
 8006dc8:	b292      	uxth	r2, r2
 8006dca:	831a      	strh	r2, [r3, #24]
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <__libc_init_array>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	4d0d      	ldr	r5, [pc, #52]	; (8006e20 <__libc_init_array+0x38>)
 8006dec:	4c0d      	ldr	r4, [pc, #52]	; (8006e24 <__libc_init_array+0x3c>)
 8006dee:	1b64      	subs	r4, r4, r5
 8006df0:	10a4      	asrs	r4, r4, #2
 8006df2:	2600      	movs	r6, #0
 8006df4:	42a6      	cmp	r6, r4
 8006df6:	d109      	bne.n	8006e0c <__libc_init_array+0x24>
 8006df8:	4d0b      	ldr	r5, [pc, #44]	; (8006e28 <__libc_init_array+0x40>)
 8006dfa:	4c0c      	ldr	r4, [pc, #48]	; (8006e2c <__libc_init_array+0x44>)
 8006dfc:	f000 f820 	bl	8006e40 <_init>
 8006e00:	1b64      	subs	r4, r4, r5
 8006e02:	10a4      	asrs	r4, r4, #2
 8006e04:	2600      	movs	r6, #0
 8006e06:	42a6      	cmp	r6, r4
 8006e08:	d105      	bne.n	8006e16 <__libc_init_array+0x2e>
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e10:	4798      	blx	r3
 8006e12:	3601      	adds	r6, #1
 8006e14:	e7ee      	b.n	8006df4 <__libc_init_array+0xc>
 8006e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e1a:	4798      	blx	r3
 8006e1c:	3601      	adds	r6, #1
 8006e1e:	e7f2      	b.n	8006e06 <__libc_init_array+0x1e>
 8006e20:	08006ea8 	.word	0x08006ea8
 8006e24:	08006ea8 	.word	0x08006ea8
 8006e28:	08006ea8 	.word	0x08006ea8
 8006e2c:	08006eac 	.word	0x08006eac

08006e30 <memset>:
 8006e30:	4402      	add	r2, r0
 8006e32:	4603      	mov	r3, r0
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d100      	bne.n	8006e3a <memset+0xa>
 8006e38:	4770      	bx	lr
 8006e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e3e:	e7f9      	b.n	8006e34 <memset+0x4>

08006e40 <_init>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	bf00      	nop
 8006e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e46:	bc08      	pop	{r3}
 8006e48:	469e      	mov	lr, r3
 8006e4a:	4770      	bx	lr

08006e4c <_fini>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	bf00      	nop
 8006e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e52:	bc08      	pop	{r3}
 8006e54:	469e      	mov	lr, r3
 8006e56:	4770      	bx	lr
